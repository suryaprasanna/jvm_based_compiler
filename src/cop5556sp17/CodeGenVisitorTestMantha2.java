package cop5556sp17;
import java.io.ByteArrayOutputStream;
import java.lang.reflect.InvocationTargetException;

import java.io.FileOutputStream;

import java.io.OutputStream;

import java.io.PrintStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;

import org.junit.Test;

import static org.junit.Assert.*;

import org.junit.rules.ExpectedException;



import cop5556sp17.AST.ASTNode;

import cop5556sp17.AST.Program;
public class CodeGenVisitorTestMantha2 {



        static final boolean doPrint = true;
        @Before
        public void initLog(){
        if (devel || grade) PLPRuntimeLog.initLog();
        }
        @After
        public void printLog(){
        System.out.println(PLPRuntimeLog.getString());
        }
        static void show(Object s) {

                if (doPrint) {

                        System.out.println(s);

                }

        }



        @Rule

        public ExpectedException thrown = ExpectedException.none();



        boolean devel = false;

        boolean grade = true;






        @Test

        public void emptyProg() throws Exception {

                //scan, parse, and type check the program

                String progname = "emptyProg";

                String input = progname + "  {}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        @Test

        public void testSimple() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple";

                String input = progname + " {integer a integer b b<-10; a<-b;}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }
        @Test

        public void testSimple2() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple1";

                String input = progname + " {boolean a boolean b b<-true; a<-b;}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        @Test

        public void testIfTrue() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple2";

                String input = progname + " {boolean a boolean b if(true) {b<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfTrueBinaryPlus() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple3";

                String input = progname + " {integer a boolean b if(true) {a<-4+5;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfTrueBinaryMinus() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple4";

                String input = progname + " {integer a boolean b if(true) {a<-4-5;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfTrueBinaryMul() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple5";

                String input = progname + " {integer a boolean b if(true) {a<-4*5;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfTrueBinaryDiv() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple6";

                String input = progname + " {integer a boolean b if(true) {a<-10/2;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfFalse() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple7";

                String input = progname + " {boolean a boolean b if(false) {b<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        @Test

        public void testIfByIdentLit() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple8";

                String input = progname + " {boolean a boolean b b<-true; if(b) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }







        public void testIfErrorUndefined() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple9";

                String input = progname + " {boolean a boolean b if(b) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfBinaryLE() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple10";

                String input = progname + " {boolean a boolean b b<-true; if(3<=3) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfBinaryLT() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple11";

                String input = progname + " {boolean a boolean b b<-true; if(3<10) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfBinaryGE() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple12";

                String input = progname + " {boolean a boolean b b<-true; if(10>=10) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfBinaryGT() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple13";

                String input = progname + " {boolean a boolean b b<-true; if(10>9) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileTrue() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple14";

                String input = progname + " {boolean a boolean b b<-true; while(b) {a<-true; b<-false;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileWithBinaryGT() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple15";

                String input = progname + " {integer a boolean b a<-5; while(a>3) { a<- a-1;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileWithBinaryGE() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple16";

                String input = progname + " {integer a boolean b a<-5; while(a>=3) { a<- a-1;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileWithBinaryLE() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple17";

                String input = progname + " {integer a integer b a<-5; b<-1; while(a<=8) { a<- a+b;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileWithBinaryLT() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple18";

                String input = progname + " {integer a integer b a<-5; b<-1; while(a<8) { a<- a+b;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfBinaryLEIntLitCondition() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple19";

                String input = progname + " {boolean a integer b integer c c<-6; b<-6; if(c<=b) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfBinaryLTIntLitCondition() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple20";

                String input = progname + " {boolean a integer b integer c c<-6; b<-4; if(b<c) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfBinaryGEIntLitCondition() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple21";

                String input = progname + " {boolean a integer b integer c c<-6; b<-4; if(c>=b) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfFailBinaryGT() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple22";

                String input = progname + " {boolean a integer b integer c c<-6; b<-4; if(b>c) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileFalse() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple23";

                String input = progname + " {boolean a boolean b b<-false; while(b) {a<-true; b<-false;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileFailWithBinaryGT() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple24";

                String input = progname + " {integer a boolean b a<-5; while(a>6) { a<- a-1;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileFailWithBinaryGE() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple25";

                String input = progname + " {integer a boolean b a<-5; while(a>=6) { a<- a-1;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileFailWithBinaryLE() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple26";

                String input = progname + " {integer a integer b a<-5; b<-1; while(a<=4) { a<- a+b;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileFailWithBinaryLT() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple27";

                String input = progname + " {integer a integer b a<-5; b<-1; while(a<5) { a<- a+b;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfParamDecInt() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple28";

                String input = progname + " integer abc {integer a if(abc<10) {a<-5;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"42"};

                //String[] args = new String[0];

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfParamDec2Int() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple29";

                String input = progname + " integer abc {integer a a<-abc; if(a>10) {a<-5;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"42"};

                //String[] args = new String[0];

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfParamDec3Int() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple30";

                String input = progname + " integer abc, integer def {integer a a<-abc; if(a+def>52) {a<-5;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"42","10"};

                //String[] args = new String[0];

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfParamDec4Int() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple31";

                String input = progname + " integer abc, integer def {integer a a<-abc; if(a+def>=52) {a<-5;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"42","10"};

                //String[] args = new String[0];

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfParamDec5Bool() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple32";

                String input = progname + " boolean abc {integer a if(abc) {a<-5;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"true"};

                //String[] args = new String[0];

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfParamDec6Bool() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple33";

                String input = progname + " boolean abc {integer a if(abc) {a<-5;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"false"};

                //String[] args = new String[0];

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        @Test

        public void testIfParamDec6BoolInt() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple34";

                String input = progname + " boolean boolLit, integer intLit {integer a if(boolLit) {a<-intLit;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"true", "30"};

                //String[] args = new String[0];

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testANDBoolean1() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple35";

                String input = progname + " {boolean a boolean b integer c a<-true; b<-true; if(a&b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testANDBoolean2() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple36";

                String input = progname + " {boolean a boolean b integer c a<-false; b<-true; if(a&b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testANDBoolean3() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple37";

                String input = progname + " {boolean a boolean b integer c a<-true; b<-false; if(a&b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testANDBoolean4() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple38";

                String input = progname + " {boolean a boolean b integer c a<-false; b<-false; if(a&b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testORBoolean1() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple39";

                String input = progname + " {boolean a boolean b integer c a<-false; b<-false; if(a|b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testORBoolean2() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple40";

                String input = progname + " {boolean a boolean b integer c a<-true; b<-false; if(a|b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testORBoolean3() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple41";

                String input = progname + " {boolean a boolean b integer c a<-false; b<-true; if(a|b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testORBoolean4() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple42";

                String input = progname + " {boolean a boolean b integer c a<-true; b<-true; if(a|b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testORParamDecBoolean1() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple43";

                String input = progname + " boolean a {boolean b integer c b<-false; integer ghi if(a|b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"TRUE"}; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testANDParamDecBoolean1() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple44";

                String input = progname + " boolean a {boolean b integer c b<-true; if(a&b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"tRUe"}; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testANDParamDecBoolean2() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple45";

                String input = progname + " integer a {boolean b integer c b<-true; c<-6; if(a+c<=5){ c<-10; b<-false;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"2"}; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testANDParamDecBoolean3() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple46";

                String input = progname + " integer a, integer deb, boolean xyz { if(a+deb<=5){ xyz<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"2", "67", "False"}; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testBoolInt() throws Exception

        {

                //scan, parse, and type check the program

                String progname = "testSimple47";

                String input = progname + " integer temporary, boolean valid, integer number {boolean temporary temporary <- true; if(temporary) {valid <- false;number <- 6;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                assertEquals(progname, name);

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"2", "True", "3"}; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();



        }

        @Test

        public void testBoolIntnew() throws Exception

        {

                //scan, parse, and type check the program

                String progname = "testSimple47";

                String input = progname + " integer tp{ integer tp}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                assertEquals(progname, name);

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"2", "True", "3"}; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();



        }

        @Test

    public void testBinaryExp() throws Exception

    {

    //scan, parse, and type check the program

    String progname = "testSimple48";

    String input = progname + "p {integer a integer b integer c integer d a <- 1; b <- 2; c <- 3; d <- 4; \nif((a*b)!=(c/d)){a <- 3;}}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show(program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String name = ((Program) program).getName();

    String classFileName = "bin/" + name + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    System.out.println("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[0]; //create command line argument array to initialize params, none in this case

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }


    @Test

    public void testBinaryExp1() throws Exception

    {

    //scan, parse, and type check the program

    String progname = "testSimple50";

    String input = progname + "p boolean xyz{integer a integer b integer c integer d a <- 1; b <- 2; c <- 3; d <- 4; \nif((a*b)!=(c/d)){a <- 3;}}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show(program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String name = ((Program) program).getName();

    String classFileName = "bin/" + name + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    System.out.println("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"3"}; //create command line argument array to initialize params, none in this case

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void testBinaryExp2() throws Exception

    {

    //scan, parse, and type check the program

    String progname = "testSimple50";

    String input = progname + "p boolean xyz{integer a integer b integer c integer d a <- 8; b <- 2; xyz<-false; c <- 3; d <- 4; \nif((a*b)!=(c/d)){a <- 3;}}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show(program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String name = ((Program) program).getName();

    String classFileName = "bin/" + name + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    System.out.println("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"3"}; //create command line argument array to initialize params, none in this case

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

        public void testANDBoolean34() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple51";

                String input = progname + " {boolean a boolean b integer c a<-true; b<-false; if(a<b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



    @Test

    public void paramInitialization0() throws Exception {

    String name = "paramInitialization";

    String input = name + " integer i1 {integer i2 i2 <- i1;}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"42"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void paramInitialization1() throws Exception {

    String name = "paramInitialization";

    String input = name + " integer i1, integer i2 {integer i3 i3 <- i1 + i2;}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"42", "58"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void booleanLitExp0() throws Exception {

    String name = "booleanLitExp0";

    String input = name + " boolean b1, boolean b2 {boolean b3 b3 <- b1 < b2;}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"false", "true"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void booleanLitExp1() throws Exception {

    String name = "booleanLitExp1";

    String input = name + " boolean b1, boolean b2 {boolean b3 b3 <- b1 < b2;}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"true", "false"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void ifStatement0() throws Exception {

    String name = "ifStatement0";

    String _input = name + " boolean b1, boolean b2 {integer i1";

    String input = _input + " if (b1 < b2) {i1 <- 200;}}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"false", "true"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void ifStatement1() throws Exception {

    String name = "ifStatement1";

    String _input = name + " integer i1, integer i2 {integer i3";

    String input = _input + " if ((i1+i2) >= i2*2) {i3 <- i1+i2; i2 <- (i2*10 + i1/5) - i2*2;}}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"125", "25"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void ifStatement2() throws Exception {

    String name = "ifStatement2";

    String _input = name + " integer i1, integer i2, integer i4 {\n integer i3";

    _input = _input + " \nif ((i1+i2) >= i2*2) {\n integer i4 \n i3 <- i1+i2;";

    String input = _input + " \n i4 <- (i2*10 + i1/5) - i2*2;} \n i4 <- i4 - 10;}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"125", "25", "100"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void whileStatement0() throws Exception {

    String name = "whileStatement0";

    String _input = name + " integer i1, integer i2 {integer i3";

    String input = _input + " while (i1 < i2) {i3 <- i1+i2; i1 <- i1+1;}}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"0", "10"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void whileStatement1() throws Exception {

    String name = "whileStatement1";

    String _input = name + " integer i1, integer i2 {integer i3 i3 <- 0;";

    String input = _input + " while (i1 >= i2) {i3 <- i3+10; i1 <- i1-1;}}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"10", "0"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void whileStatement2() throws Exception {

    String name = "whileStatement2";

    String _input = name + " integer i1, integer i2 {integer i3 i3 <- 0;";

    String input = _input + " while (i1 > i2) {i3 <- (i3+10)*i2; i1 <- i1-1;}}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"10", "5"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void whileIfStatement0() throws Exception {

    String name = "whileIfStatement6";

    String _input = name + " integer i1, integer i2 {\n integer i3 \n i3 <- 0;";

    _input = _input + " \n while (i1 > i2) {\n i3 <- (i3+10*i1)/i2;\n i1 <- i1-1;";

    String input = _input + " \n if (i1 > 10) {\n i1 <- i1/2;}}}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"50", "5"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }
    	@Test
    	public void sleepStatement0() throws Exception {
    		String name = "sleepStatement0";
    		String input = name + " integer i1, integer i2 ";
    		input += "{\n image i sleep(i1*i2);}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[]{"50", "5",
    				"C:/Users/Surya/Downloads/Sample/birds1.jpg",
    				"C:/Users/Surya/Downloads/Sample/birds1.jpg"}; //create String[] array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	/* simple test to load an image from a file and save it to a different file */
    	@Test
    	public void assng6Test0() throws Exception {
    		String name = "assng6Test0";
    		String input = name + " file f1, file f2 {\n image i f1->i; i->f2;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");
    		args[1] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	/* load an image file, scale it and save it back to another file */
    	@Test
    	public void assng6Test1() throws Exception {
    		String name = "assng6Test1";
    		String input = name + " file f1, file f2 {\n image i f1->i->scale(2)->f2;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");
    		args[1] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	/* simple test to find the height of an image */
    	@Test
    	public void assng6Test2() throws Exception {
    		String name = "assng6Test2";
    		String input = name + " file f1 {\n image i integer h f1->i->height->h;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");

    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	/* simple test to find the width of an image */
    	@Test
    	public void assng6Test3() throws Exception {
    		String name = "assng6Test3";
    		String input = name + " file f1 {\n image i integer h f1->i->width->h;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");

    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	/* simple test to load an image file, blur it and save it back to another file */
    	@Test
    	public void assng6Test4() throws Exception {
    		String name = "assng6Test4";
    		String input = name + " file f1, file f2 {\n image i f1->i->blur;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");
    		args[1] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	/* simple test to load an image file, gray it and save it back to another file */
    	@Test
    	public void assng6Test5() throws Exception {
    		String name = "assng6Test5";
    		String input = name + " file f1, file f2 {\n image i f1->i->gray->f2;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");
    		args[1] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	/* simple test to load an image file, convolve it and save it back to another file */
    	@Test
    	public void assng6Test6() throws Exception {
    		String name = "assng6Test6";
    		String input = name + " file f1, file f2 {\n image i "
    				+ "f1->i"
    				+ "->convolve"
    				+ "->f2"
    				+ ";}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");
    		args[1] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	/* simple test to load an image from an url, scale it double, gray it and save it to a file */
    	@Test
    	public void assng6Test7() throws Exception {
    		String name = "assng6Test7";
    		String input = name + " url u, file f1 {\n image i u->i->scale(2)->gray->f1;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		args[1] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	/* simple test to load an image from a file, set it in a frame and show */
    	@Test
    	public void assng6Test8() throws Exception {
    		String name = "assng6Test8";
    		String input = name + " file in {\n image i frame fm in->i->fm->show; sleep(3000);}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");

    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	/* simple test to load an image from a file, set it in a frame, move it and show */
    	@Test
    	public void assng6Test9() throws Exception {
    		String name = "assng6Test9";
    		String input = name + " file in {\n image i frame fm in->i->fm->move(1,2)->show; sleep(3000);}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");

    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	/* simple test to load an image from a file, set it in a frame, move it and show.
    	 * get the x and y loc of the frame, scale the image by double and move it by adding
    	 * 500 to its original xloc and yloc and show */
    	@Test
    	public void assng6Test10() throws Exception {
    		String name = "assng6Test10";
    		String input = name + " file in, file in1 {\n integer j integer j1 frame f image i image i1 frame fm integer x integer y";
    		input += " in->i;}";
    		//input += " in->i->fm->move(1,2)->show; sleep(1000);\n fm->xloc->x; fm->yloc->y;";
    		//input += " i->scale(2)->fm->move(x+500, y+500)->show; sleep(4000);}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");
    		args[1] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void assng6Test01() throws Exception {
    		String name = "assng6Test0";
    		String input = name + " integer f1, integer f2 {\n "
    				+ "integer i "
    				+ "f1->i; "
    				+ "i->f2;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("1");
    		args[1] = new String("2");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void testCMDArgs() throws Exception {
    		String progname = "Prog";
    		String input = progname + " boolean b1, integer int1 {}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		// show(program);

    		// generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		// output the generated bytecode
    		// CodeGenUtils.dumpBytecode(bytecode);

    		// write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = { "true", "345", "34" }; // create command line argument
    													// array to initialize
    													// params, none in this case
    		try {
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		} catch (InvocationTargetException e) {
    			e.printStackTrace();
    			throw e;
    		}
    	}

    	@Test
    	public void testDeclarations() throws Exception {
    		String progname = "Prog";
    		String input = progname + " boolean b1, integer int1 { integer int1 integer int2}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		// show(program);

    		// generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		// output the generated bytecode
    		// CodeGenUtils.dumpBytecode(bytecode);

    		// write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = { "true", "345" }; // create command line argument array
    											// to initialize params, none in
    											// this case
    		try {
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		} catch (InvocationTargetException e) {
    			e.printStackTrace();
    			throw e;
    		}
    	}

    	@Test
    	public void testLitExpressionsFieldAndLocal() throws Exception {
    		String progname = "Prog";
    		String input = progname
    				+ " boolean b1, integer int1 { integer int1 integer int2 boolean b3 int1 <- 5; int2 <- 500; b3 <- true; b1 <- false;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		// show(program);

    		// generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		// output the generated bytecode
    		// CodeGenUtils.dumpBytecode(bytecode);

    		// write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = { "true", "345" }; // create command line argument array
    											// to initialize params, none in
    											// this case
    		try {
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		} catch (InvocationTargetException e) {
    			e.printStackTrace();
    			throw e;
    		}
    	}

    	@Test
    	public void testIdentExpressionsFieldAndLocal() throws Exception {
    		String progname = "Prog";
    		String input = progname
    				+ " boolean b1, integer int6, integer int7 { integer int1 integer int2 boolean b3 \n int1 <- 5;\n int2 <- 500;"
    				+ " int6 <-int2; int1 <-int6; b3 <- true; b1 <- b3; int7 <- int6;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		// show(program);

    		// generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		// output the generated bytecode
    		// CodeGenUtils.dumpBytecode(bytecode);

    		// write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = { "true", "345", "54" }; // create command line argument
    													// array
    		// to initialize params, none in
    		// this case
    		try {
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		} catch (InvocationTargetException e) {
    			e.printStackTrace();
    			throw e;
    		}
    	}

    	@Test
    	public void testEmptyIf() throws Exception {
    		String progname = "Prog";
    		String input = progname
    				+ " boolean b1, integer int6, integer int7 { integer int1 integer int2 boolean b3 \n int1 <- 4; int2 <- 5;"
    				+ " if( int1 != int2){ }}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		// show(program);

    		// generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		// output the generated bytecode
    		// CodeGenUtils.dumpBytecode(bytecode);

    		// write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = { "true", "345", "54" }; // create command line argument
    													// array
    		// to initialize params, none in
    		// this case
    		try {
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		} catch (InvocationTargetException e) {
    			e.printStackTrace();
    			throw e;
    		} catch (VerifyError e) {
    			e.printStackTrace();
    			throw e;
    		}
    	}

    	@Test
    	public void testIfwithNoDecs() throws Exception {
    		String progname = "Prog";
    		String input = progname
    				+ " boolean b1, integer int6, integer int7 { integer int1 integer int2 boolean b3 \n int1 <- 4; int2 <- 5;"
    				+ " if( int1 != int2){  \n int1 <- 4;\nint7 <- int2;\n}" + " int2 <- 5;\n int7 <- int2;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		// show(program);

    		// generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		// output the generated bytecode
    		// CodeGenUtils.dumpBytecode(bytecode);

    		// write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = { "true", "345", "54" }; // create command line argument
    													// array
    		// to initialize params, none in
    		// this case
    		try {
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		} catch (InvocationTargetException e) {
    			e.printStackTrace();
    			throw e;
    		} catch (VerifyError e) {
    			e.printStackTrace();
    			throw e;
    		}
    	}

    	@Test
    	public void testIfwithDecs() throws Exception {
    		String progname = "Prog";
    		String input = progname
    				+ " boolean b1, integer int6, integer int7 { integer int1 integer int2 boolean b3 \n int1 <- 4; int2 <- 5;"
    				+ " if( int1 != int2){  \n int1 <- 4;" + "\nint7 <- int2;"
    				+ "integer int1 boolean b3 boolean b b <- true; int1 <- 50 ; b3 <- false;}"
    				+ " int2 <- 5;\n int7 <- int2; }";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		// show(program);

    		// generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		// output the generated bytecode
    		// CodeGenUtils.dumpBytecode(bytecode);

    		// write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = { "true", "345", "54" }; // create command line argument
    													// array
    		// to initialize params, none in
    		// this case
    		try {
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		} catch (InvocationTargetException e) {
    			e.printStackTrace();
    			throw e;
    		} catch (VerifyError e) {
    			e.printStackTrace();
    			throw e;
    		}
    	}

    	@Test
    	public void testIfComplexRelOpExpressions() throws Exception {
    		String progname = "Prog";
    		String input = progname
    				+ " boolean b1, integer int6, integer int7 { integer int1 integer int2 boolean b3 \n int1 <- 4; int2 <- 5;"
    				+ " if( int1 != int2 < true > false >= false <= true == true){  \n int1 <- 4;" + "\nint7 <- int2;"
    				+ "integer int1 boolean b3 boolean b \n" + "b <- true;" + "\n int1 <- 50 ;" + "\n b3 <- false;}"
    				+ " int2 <- 5;\n int7 <- int2; }";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		// show(program);

    		// generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		// output the generated bytecode
    		// CodeGenUtils.dumpBytecode(bytecode);

    		// write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = { "true", "345", "54" }; // create command line argument
    													// array
    		// to initialize params, none in
    		// this case
    		try {
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		} catch (InvocationTargetException e) {
    			e.printStackTrace();
    			throw e;
    		} catch (VerifyError e) {
    			e.printStackTrace();
    			throw e;
    		}
    	}

    	@Test
    	public void testIfStronAndWeakOpExpressions() throws Exception {
    		String progname = "Prog";
    		String input = progname
    				+ " boolean b1, integer int6, integer int7 { integer int1 integer int2 boolean b3 \n int1 <- 4;\n int2 <- 5;\n"
    				+ " if( int1 != int2 < true > false >= false <= true == true){  \n int1 <- 4;" + "\nint7 <- int2;"
    				+ "integer int1 boolean b3 boolean b \n" + "b <- true;"
    				+ "\n int1 <- 50 + 100 * (1 + 2) % (4-2) / (9-6);" + "int1 <- 50 + 50*(5-4) - (10 - 80/(12-2));"
    				+ "\n b3 <- false <= true >= (false >= true);" + "\n b3 <- false & (true | false);"
    				+ "\n b3 <- (false & true) | true;}" + " int2 <- 5;\n int7 <- int2; }";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		// show(program);

    		// generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		// output the generated bytecode
    		// CodeGenUtils.dumpBytecode(bytecode);

    		// write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = { "true", "345", "54" }; // create command line argument
    													// array
    		// to initialize params, none in
    		// this case
    		try {
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		} catch (InvocationTargetException e) {
    			e.printStackTrace();
    			throw e;
    		} catch (VerifyError e) {
    			e.printStackTrace();
    			throw e;
    		}
    	}

    	@Test
    	public void testWhileWithoutDec() throws Exception {
    		String progname = "Prog";
    		String input = progname
    				+ " boolean b1, integer int6, integer int7 { integer int1 integer int2 boolean b3 \n int1 <- 4; int2 <- 5;"
    				+ " while( int1 != int2){ int1 <- int2;}}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		// show(program);

    		// generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		// output the generated bytecode
    		// CodeGenUtils.dumpBytecode(bytecode);

    		// write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = { "true", "345", "54" }; // create command line argument
    													// array
    		// to initialize params, none in
    		// this case
    		try {
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		} catch (InvocationTargetException e) {
    			e.printStackTrace();
    			throw e;
    		} catch (VerifyError e) {
    			e.printStackTrace();
    			throw e;
    		}
    	}

    	@Test
    	public void testWhileWithDec() throws Exception {
    		String progname = "Prog";
    		String input = progname
    				+ " boolean b1, integer int6, integer int7 { integer int1 integer int2 boolean b3 \n int1 <- 4; int2 <- 5;"
    				+ " while( int1 != int2){ int1 <- int2; integer int3 boolean b3 " + "\nb3 <- true;" + "\nint3 <- int2;"
    				+ "int7 <- int3;" + "b3 <- b1;" + "int6 <- int7;}}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		// show(program);

    		// generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		// output the generated bytecode
    		// CodeGenUtils.dumpBytecode(bytecode);

    		// write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = { "true", "345", "54" }; // create command line argument
    													// array
    		// to initialize params, none in
    		// this case
    		try {
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		} catch (InvocationTargetException e) {
    			e.printStackTrace();
    			throw e;
    		} catch (VerifyError e) {
    			e.printStackTrace();
    			throw e;
    		}
    	}

    	/* Test cases for assignment 6 */
    	@Test
    	public void testRemainingDeclarations() throws Exception {
    		String progname = "Prog";
    		String input = progname + " boolean b1, integer int1 { integer int1 integer int2 image img1 frame frame1}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		// show(program);

    		// generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		// output the generated bytecode
    		// CodeGenUtils.dumpBytecode(bytecode);

    		// write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = { "true", "345" }; // create command line argument array
    											// to initialize params, none in
    											// this case
    		try {
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		} catch (InvocationTargetException e) {
    			e.printStackTrace();
    			throw e;
    		}
    	}

    	@Test
    	public void testSleepStmt() throws Exception {
    		String progname = "Prog";
    		String input = progname + " boolean b1, integer int1 { integer int1 integer int2 image img1 frame frame1"
    				+ "\nint2 <- 2000;" + "\nsleep 2000;" + "\nsleep int2;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		// show(program);

    		// generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		// output the generated bytecode
    		// CodeGenUtils.dumpBytecode(bytecode);

    		// write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = { "true", "345" }; // create command line argument array
    											// to initialize params, none in
    											// this case
    		try {
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		} catch (InvocationTargetException e) {
    			e.printStackTrace();
    			throw e;
    		}
    	}

    	@Test
    	public void testDecNExpressionsFieldAndLocal1() throws Exception {
    		String progname = "Prog";
    		String input = progname + " boolean b1, integer int1, file f, url url1{ integer int1 integer int2 boolean b3"
    				+ "\nint1 <- 5; " + "\nint2 <- 500; " + "\nb3 <- true;" + "\nb1 <- false;" + "b3 <- b1;" + "b1 <- b3;}";
    		// + "file1 <- f}"; //not allowed
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		// show(program);

    		// generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		// output the generated bytecode
    		// CodeGenUtils.dumpBytecode(bytecode);

    		// write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = { "true", "345", "C:/Users/Surya/Downloads/Sample/birds1.jpg", "http://example.com/" }; // create
    																				// command
    																				// line
    																				// argument
    																				// array
    		// to initialize params, none in
    		// this case
    		try {
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		} catch (InvocationTargetException e) {
    			e.printStackTrace();
    			throw e;
    		}
    	}

    	@Test
    	public void testIdentChain() throws Exception {
    		String progname = "Prog";
    		String input = progname + " boolean b1, integer int6, integer int5, file f, url url1, file file1{ \n"
    				+ "integer int1 integer int2 boolean b3 image img1 image img2 frame frame1" + "\nint1 <- 5; "
    				+ "\nint2 <- 500; " + "\nb3 <- true;" + "\nb1 <- false;" + "\nb3 <- b1;" + "\nb1 <- b3;"
    				+ "\nf -> img1;" + "\nurl1 -> img1;"
    						+ "img1 ->file1;" +
    				"\nimg1->img2;" + "\nint1->int2;" + "\nint6->int1;"
    				+ "\nint2->int1; \nint2->int6;" + "\nint6->int5;" + "\nimg1->frame1;}";
    		//"file1 <- f;}"; this is illegal

    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		// show(program);

    		// generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		// output the generated bytecode
    		//CodeGenUtils.dumpBytecode(bytecode);

    		// write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = { "true", "345", "89",
    				//"C:\\Users\\vjpra\\OneDrive\\Pictures\\Camera Roll\\Vijay_at_DasAshwaMedh_20160706.jpg",
    				"C:/Users/Surya/Downloads/Sample/birds1.jpg",
    				"https://www.craigjoneswildlifephotography.co.uk/blog/wp-content/uploads/2010/07/CMJ4893Jpeg-FB.jpg" ,
    				"downloaded_image"}; // create command line argument array
    		try {
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		} catch (InvocationTargetException e) {
    			e.printStackTrace();
    			throw e;
    		}
    	}

    	@Test
    	public void testFilterOps() throws Exception {
    		String progname = "Prog";
    		String input = progname + " boolean b1, integer int6, integer int5, file f, url url1, file file1{ \n"
    				+ "integer int1 integer int2 boolean b3 image img1 image img2 frame frame1"
    				+ "\nf -> img1;" + "\nurl1 -> img2;" + "\nimg1->img2;"
    				+ "img1->frame1->show->hide;"
    				+ "img1->blur->frame1->show->hide;"
    				//+ "frame1->hide->show;"
    				+ "img1->convolve->frame1->show;"
    				+ "img1->gray->frame1->show;"
    				+ "img1|->gray->frame1->show;"
    				+ "frame1->hide->show;}";
    				/*+ "img1->width;"
    				+ "img1->width->int1;"
    				+ "img1->height;"
    				+ "img1->height->int6;"
    				+ "img1->scale(15)->frame1->show;"
    				+ "img1->scale(5);"
    				+ "frame1->show;}";*/
    		//"file1 <- f;}"; this is illegal

    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		// show(program);

    		// generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		// output the generated bytecode
    		//CodeGenUtils.dumpBytecode(bytecode);

    		// write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = { "true", "345", "89",
    				//"C:\\Users\\vjpra\\OneDrive\\Pictures\\Camera Roll\\Vijay_at_DasAshwaMedh_20160706.jpg",
    				"C:/Users/Surya/Downloads/Sample/birds1.jpg",
    				"https://www.craigjoneswildlifephotography.co.uk/blog/wp-content/uploads/2010/07/CMJ4893Jpeg-FB.jpg" ,
    				"don't testit"}; // create command line argument array
    		try {
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		} catch (InvocationTargetException e) {
    			e.printStackTrace();
    			throw e;
    		}
    	}

    	@Test
    	public void testFrameOpsAndConstantExprs() throws Exception {
    		String progname = "Prog";
    		String input = progname + " boolean b1, integer int6, integer int5, file f, url url1, file file1{ \n"
    				+ "integer int1 integer int2 boolean b3 image img1 image img2 frame frame1"
    				+ "\nf -> img1;" + "\nurl1 -> img1;" + "\nimg1->img2;"
    				+ "\nimg1->frame1->show->hide->move(screenwidth, screenheight);"
    				+ "frame1->show->hide->move(100, 200);"
    				+ "\nimg1->frame1->xloc->int1;"
    				+ "frame1->yloc;"
    				+ "frame1->yloc;"
    				+ "frame1->yloc->int2;}";
    		//"file1 <- f;}"; this is illegal

    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		// show(program);

    		// generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		// output the generated bytecode
    		//CodeGenUtils.dumpBytecode(bytecode);

    		// write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = { "true", "345", "89",
    				//"C:\\Users\\vjpra\\OneDrive\\Pictures\\Camera Roll\\Vijay_at_DasAshwaMedh_20160706.jpg",
    				"C:/Users/Surya/Downloads/Sample/birds1.jpg",
    				"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg" ,
    				"C:/Users/Surya/Downloads/Sample/birds2.jpg"}; // create command line argument array
    		try {
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		} catch (InvocationTargetException e) {
    			e.printStackTrace();
    			throw e;
    		}
    	}

    	@Test
    	public void testImageOps() throws Exception {
    		String progname = "Prog";
    		String input = progname + " boolean b1, integer int6, integer int5, file f, url url1, file file1{ \n"
    				+ "integer int1 integer int2 boolean b3 image img1 image img2 frame frame1"
    				+ "\nf -> img1;" + "\nurl1 -> img2;" + "\nimg1<-img2;" + "img1->scale(15)->frame1->show;" + "\nimg1->img2;"
    				+ "img1->width;"
    				+ "img1->width->int1;"
    				+ "img1->height;"
    				+ "img1->height->int6;"
    				+ "img1->scale(15)->frame1->show;"
    				+ "img1->scale(5);"
    				+ "frame1->show;}";
    		//"file1 <- f;}"; this is illegal

    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		// show(program);

    		// generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		// output the generated bytecode
    		//CodeGenUtils.dumpBytecode(bytecode);

    		// write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = { "true", "345", "89",
    				//"C:\\Users\\vjpra\\OneDrive\\Pictures\\Camera Roll\\Vijay_at_DasAshwaMedh_20160706.jpg",
    				"C:/Users/Surya/Downloads/Sample/birds1.jpg",
    				"https://www.craigjoneswildlifephotography.co.uk/blog/wp-content/uploads/2010/07/CMJ4893Jpeg-FB.jpg" ,
    				"don't testit"}; // create command line argument array
    		try {
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		} catch (InvocationTargetException e) {
    			e.printStackTrace();
    			throw e;
    		}
    	}

    	@Test
    	public void testBinaryExprWithImages() throws Exception {
    		String progname = "ProgError123";
    		String input = progname + " boolean b1, integer int6, integer int5, file f, url url1, file file1{ \n"
    				+ "integer int1 integer int2 boolean b3 image img1 image img2 image targetImg frame frame1"
    				+ "\nf -> img1;" + "\nurl1 -> img2;"
    						+ "targetImg<-img1+img2;"
    						+ "targetImg<-img1-img2;"
    						+ "targetImg<-img1*12;"
    						+ "targetImg->scale(10)->frame1->show;"
    						+ "targetImg<-12*img2;"
    						+ "targetImg->scale(10)->frame1->show;"
    						+ "targetImg<-img2/2;"
    						+ "targetImg->scale(2)->frame1->show;"
    						+ "targetImg<-img2%2;"
    						+ "targetImg->scale(2)->frame1->show;}";
    		//"file1 <- f;}"; this is illegal

    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		// show(program);

    		// generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		// output the generated bytecode
    		//CodeGenUtils.dumpBytecode(bytecode);

    		// write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = { "true", "345", "89",
    				//"C:\\Users\\vjpra\\OneDrive\\PLP-COP5556\\Assignment-6\\Sign-LogOff-icon.png",
    				"C:/Users/Surya/Downloads/Sample/birds1.jpg",
    				"http://icons.iconarchive.com/icons/yellowicon/game-stars/256/Mario-icon.png" ,
    				"don't testit"}; // create command line argument array
    		try {
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		} catch (InvocationTargetException e) {
    			e.printStackTrace();
    			throw e;
    		}
    	}
    	@Test
    	public void sleepImg2() throws Exception {
    		String name = "sleepImg";
    		String input = name+" url u {image i frame f \nu -> i -> convolve -> f -> show;sleep 5;integer j j <- 42;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("https://www.craigjoneswildlifephotography.co.uk/blog/wp-content/uploads/2010/07/CMJ4893Jpeg-FB.jpg");

    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void convolveImg5() throws Exception {
    		String name = "convolveImg";
    		String input = name+" url u {image i frame f \nu -> i -> convolve -> f -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("https://www.craigjoneswildlifephotography.co.uk/blog/wp-content/uploads/2010/07/CMJ4893Jpeg-FB.jpg");

    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void allTheOp6s() throws Exception {
    		String name = "allTheOps";
    		String input = name+" file u {image i frame f \nu -> i -> gray -> convolve -> blur -> i -> f -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");

    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	public void blurImg45() throws Exception {
    		String name = "blurImg";
    		String input = name+" url u {image i frame f \nu -> i -> blur -> f -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("https://www.craigjoneswildlifephotography.co.uk/blog/wp-content/uploads/2010/07/CMJ4893Jpeg-FB.jpg");

    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	@Test
    	 public void prog1() throws Exception {
    	  //scan, parse, and type check the program
    	  String progname = "prog1";
    	  String input = progname + " {sleep(5);}";
    	  Scanner scanner = new Scanner(input);
    	  scanner.scan();
    	  Parser parser = new Parser(scanner);
    	  ASTNode program = parser.parse();
    	  TypeCheckVisitor v = new TypeCheckVisitor();
    	  PLPRuntimeLog.initLog();
    	  program.visit(v, null);
    	  show(program);

    	  //generate code
    	  CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	  byte[] bytecode = (byte[]) program.visit(cv, null);

    	  //output the generated bytecode
    	  CodeGenUtils.dumpBytecode(bytecode);

    	  //write byte code to file
    	  String name = ((Program) program).getName();
    	  String classFileName = "bin/" + name + ".class";
    	  OutputStream output = new FileOutputStream(classFileName);
    	  output.write(bytecode);
    	  output.close();
    	  System.out.println("wrote classfile to " + classFileName);

    	  // directly execute bytecode
    	  String[] args = new String[0]; //create command line argument array to initialize params, none in this case
    	  Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    	  String expOut = "";
    	  ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	  PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);

    	  instance.run();
    	 }

    	 @Test
    	 public void prog2() throws Exception {
    	  //scan, parse, and type check the program
    	  String progname = "prog2";
    	  //String input = progname + " file in, file out{image i \n in -> i; i -> out;} ";
    	  //String input = progname + " file in, file out{image i \n in -> i -> out;} ";
    	  String input = progname + " file in, file out{image i \n in -> i; \n integer h \n i -> height -> h; \n integer test \n test <- h;} ";
    	  Scanner scanner = new Scanner(input);
    	  scanner.scan();
    	  Parser parser = new Parser(scanner);
    	  ASTNode program = parser.parse();
    	  TypeCheckVisitor v = new TypeCheckVisitor();
    	  PLPRuntimeLog.initLog();
    	  program.visit(v, null);
    	  show(program);

    	  //generate code
    	  CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	  byte[] bytecode = (byte[]) program.visit(cv, null);

    	  //output the generated bytecode
    	  CodeGenUtils.dumpBytecode(bytecode);

    	  //write byte code to file
    	  String name = ((Program) program).getName();
    	  String classFileName = "bin/" + name + ".class";
    	  OutputStream output = new FileOutputStream(classFileName);
    	  output.write(bytecode);
    	  output.close();
    	  System.out.println("wrote classfile to " + classFileName);

    	  // directly execute bytecode
    	  String[] args = new String[]{"C:/Users/Surya/Downloads/Sample/birds1.jpg","C:/Users/Surya/Downloads/Sample/new111.jpg"}; //create command line argument array to initialize params, none in this case
    	  Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    	  String expOut = "readFromFile(C:/Users/Surya/Downloads/Sample/birds1.jpg)631";
    	  ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	  PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 }

    	 @Test
    	 public void prog3() throws Exception {
    	  //scan, parse, and type check the program
    	  String progname = "prog3";
    	  String input = progname + " file in, file out{image i \n in -> i; \n i -> gray -> out;} ";
    	  Scanner scanner = new Scanner(input);
    	  scanner.scan();
    	  Parser parser = new Parser(scanner);
    	  ASTNode program = parser.parse();
    	  TypeCheckVisitor v = new TypeCheckVisitor();
    	  PLPRuntimeLog.initLog();
    	  program.visit(v, null);
    	  show(program);

    	  //generate code
    	  CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	  byte[] bytecode = (byte[]) program.visit(cv, null);

    	  //output the generated bytecode
    	  CodeGenUtils.dumpBytecode(bytecode);

    	  //write byte code to file
    	  String name = ((Program) program).getName();
    	  String classFileName = "bin/" + name + ".class";
    	  OutputStream output = new FileOutputStream(classFileName);
    	  output.write(bytecode);
    	  output.close();
    	  System.out.println("wrote classfile to " + classFileName);

    	  // directly execute bytecode
    	  String[] args = new String[]{"C:/Users/Surya/Downloads/Sample/birds1.jpg","C:/Users/Surya/Downloads/Sample/new111.jpg"}; //create command line argument array to initialize params, none in this case
    	  Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    	  String expOut = "readFromFile(C:/Users/Surya/Downloads/Sample/birds1.jpg)grayOpwrite(C:/Users/Surya/Downloads/Sample/new111.jpg)";
    	  ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	  PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 }

    	 @Test
    	 public void prog4() throws Exception {
    	  //scan, parse, and type check the program
    	  String progname = "prog4";
    	  String input = progname + " file in, file out{image i \n in -> i; \n i -> convolve -> out;} ";
    	  Scanner scanner = new Scanner(input);
    	  scanner.scan();
    	  Parser parser = new Parser(scanner);
    	  ASTNode program = parser.parse();
    	  TypeCheckVisitor v = new TypeCheckVisitor();
    	  PLPRuntimeLog.initLog();
    	  program.visit(v, null);
    	  show(program);

    	  //generate code
    	  CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	  byte[] bytecode = (byte[]) program.visit(cv, null);

    	  //output the generated bytecode
    	  CodeGenUtils.dumpBytecode(bytecode);

    	  //write byte code to file
    	  String name = ((Program) program).getName();
    	  String classFileName = "bin/" + name + ".class";
    	  OutputStream output = new FileOutputStream(classFileName);
    	  output.write(bytecode);
    	  output.close();
    	  System.out.println("wrote classfile to " + classFileName);

    	  // directly execute bytecode
    	  String[] args = new String[]{"C:/Users/Surya/Downloads/Sample/birds1.jpg","C:/Users/Surya/Downloads/Sample/new111.jpg"}; //create command line argument array to initialize params, none in this case
    	  Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    	  String expOut = "readFromFile(C:/Users/Surya/Downloads/Sample/birds1.jpg)convolvewrite(C:/Users/Surya/Downloads/Sample/new111.jpg)";
    	  ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	  PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 }

    	 @Test
    	 public void prog5() throws Exception {
    	  //scan, parse, and type check the program
    	  String progname = "prog5";
    	  String input = progname + " file in, file out{image i \n in -> i; \n i -> blur -> out;} ";
    	  Scanner scanner = new Scanner(input);
    	  scanner.scan();
    	  Parser parser = new Parser(scanner);
    	  ASTNode program = parser.parse();
    	  TypeCheckVisitor v = new TypeCheckVisitor();
    	  PLPRuntimeLog.initLog();
    	  program.visit(v, null);
    	  show(program);

    	  //generate code
    	  CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	  byte[] bytecode = (byte[]) program.visit(cv, null);

    	  //output the generated bytecode
    	  CodeGenUtils.dumpBytecode(bytecode);

    	  //write byte code to file
    	  String name = ((Program) program).getName();
    	  String classFileName = "bin/" + name + ".class";
    	  OutputStream output = new FileOutputStream(classFileName);
    	  output.write(bytecode);
    	  output.close();
    	  System.out.println("wrote classfile to " + classFileName);

    	  // directly execute bytecode
    	  String[] args = new String[]{"C:/Users/Surya/Downloads/Sample/birds1.jpg","C:/Users/Surya/Downloads/Sample/new111.jpg"}; //create command line argument array to initialize params, none in this case
    	  Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    	  String expOut = "readFromFile(C:/Users/Surya/Downloads/Sample/birds1.jpg)blurOpwrite(C:/Users/Surya/Downloads/Sample/new111.jpg)";
    	  ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	  PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 }

    	 @Test
    	 public void prog6() throws Exception {
    	  //scan, parse, and type check the program
    	  String progname = "prog6";
    	  String input = progname + " file in {image i frame f in -> i; i -> f; sleep(2000); f -> show; sleep(10000);\n f -> hide; f -> move(100,200) -> show; sleep(5000);}";
    	  Scanner scanner = new Scanner(input);
    	  scanner.scan();
    	  Parser parser = new Parser(scanner);
    	  ASTNode program = parser.parse();
    	  TypeCheckVisitor v = new TypeCheckVisitor();
    	  PLPRuntimeLog.initLog();
    	  program.visit(v, null);
    	  show(program);

    	  //generate code
    	  CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	  byte[] bytecode = (byte[]) program.visit(cv, null);

    	  //output the generated bytecode
    	  CodeGenUtils.dumpBytecode(bytecode);

    	  //write byte code to file
    	  String name = ((Program) program).getName();
    	  String classFileName = "bin/" + name + ".class";
    	  OutputStream output = new FileOutputStream(classFileName);
    	  output.write(bytecode);
    	  output.close();
    	  System.out.println("wrote classfile to " + classFileName);

    	  // directly execute bytecode
    	  String[] args = new String[]{"C:/Users/Surya/Downloads/Sample/birds1.jpg"}; //create command line argument array to initialize params, none in this case
    	  Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    	  String expOut = "readFromFile(C:/Users/Surya/Downloads/Sample/birds1.jpg)createOrSetFrameshowImagehideImagemoveFrameshowImage";
    	  ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	  PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 }

    	 @Test
    	 public void prog7() throws Exception {
    	  //scan, parse, and type check the program
    	  String progname = "prog7";
    	  String input = progname + " file in, file in2, file out {image i in -> i; image i2 in2 -> i2; image i3 i3 <- i + i2; i3 -> out;}";
    	  Scanner scanner = new Scanner(input);
    	  scanner.scan();
    	  Parser parser = new Parser(scanner);
    	  ASTNode program = parser.parse();
    	  TypeCheckVisitor v = new TypeCheckVisitor();
    	  PLPRuntimeLog.initLog();
    	  program.visit(v, null);
    	  show(program);

    	  //generate code
    	  CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	  byte[] bytecode = (byte[]) program.visit(cv, null);

    	  //output the generated bytecode
    	  CodeGenUtils.dumpBytecode(bytecode);

    	  //write byte code to file
    	  String name = ((Program) program).getName();
    	  String classFileName = "bin/" + name + ".class";
    	  OutputStream output = new FileOutputStream(classFileName);
    	  output.write(bytecode);
    	  output.close();
    	  System.out.println("wrote classfile to " + classFileName);

    	  // directly execute bytecode
    	  String[] args = new String[]{"C:/Users/Surya/Downloads/Sample/birds1.jpg", "C:/Users/Surya/Downloads/Sample/birds1.jpg", "C:/Users/Surya/Downloads/Sample/new111.jpg"}; //create command line argument array to initialize params, none in this case
    	  Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    	  String expOut = "readFromFile(C:/Users/Surya/Downloads/Sample/birds1.jpg)readFromFile(C:/Users/Surya/Downloads/Sample/birds1.jpg)addcopyImagewrite(C:/Users/Surya/Downloads/Sample/new111.jpg)";
    	  ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	  PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 }

    	 @Test
    	 public void prog8() throws Exception {
    	  //scan, parse, and type check the program
    	  String progname = "prog8";
    	  String input = progname + " file in, file out {image i in -> i; integer int int <- 2; image i2 i2 <- i * int; i2 -> out;}";
    	  Scanner scanner = new Scanner(input);
    	  scanner.scan();
    	  Parser parser = new Parser(scanner);
    	  ASTNode program = parser.parse();
    	  TypeCheckVisitor v = new TypeCheckVisitor();
    	  PLPRuntimeLog.initLog();
    	  program.visit(v, null);
    	  show(program);

    	  //generate code
    	  CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	  byte[] bytecode = (byte[]) program.visit(cv, null);

    	  //output the generated bytecode
    	  CodeGenUtils.dumpBytecode(bytecode);

    	  //write byte code to file
    	  String name = ((Program) program).getName();
    	  String classFileName = "bin/" + name + ".class";
    	  OutputStream output = new FileOutputStream(classFileName);
    	  output.write(bytecode);
    	  output.close();
    	  System.out.println("wrote classfile to " + classFileName);

    	  // directly execute bytecode
    	  String[] args = new String[]{"C:/Users/Surya/Downloads/Sample/birds1.jpg", "C:/Users/Surya/Downloads/Sample/new111.jpg"}; //create command line argument array to initialize params, none in this case
    	  Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    	  String expOut = "readFromFile(C:/Users/Surya/Downloads/Sample/birds1.jpg)2mulcopyImagewrite(C:/Users/Surya/Downloads/Sample/new111.jpg)";
    	  ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	  PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 }

    	 @Test
    	 public void prog9() throws Exception {
    	  //scan, parse, and type check the program
    	  String progname = "prog9";
    	  String input = progname + " file in, file out {image i in -> i; integer int int <- 2; image i2 i2 <- i % int; i2 -> out;}";
    	  Scanner scanner = new Scanner(input);
    	  scanner.scan();
    	  Parser parser = new Parser(scanner);
    	  ASTNode program = parser.parse();
    	  TypeCheckVisitor v = new TypeCheckVisitor();
    	  PLPRuntimeLog.initLog();
    	  program.visit(v, null);
    	  show(program);

    	  //generate code
    	  CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	  byte[] bytecode = (byte[]) program.visit(cv, null);

    	  //output the generated bytecode
    	  CodeGenUtils.dumpBytecode(bytecode);

    	  //write byte code to file
    	  String name = ((Program) program).getName();
    	  String classFileName = "bin/" + name + ".class";
    	  OutputStream output = new FileOutputStream(classFileName);
    	  output.write(bytecode);
    	  output.close();
    	  System.out.println("wrote classfile to " + classFileName);

    	  // directly execute bytecode
    	  String[] args = new String[]{"C:/Users/Surya/Downloads/Sample/birds1.jpg", "C:/Users/Surya/Downloads/Sample/new111.jpg"}; //create command line argument array to initialize params, none in this case
    	  Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    	  String expOut = "readFromFile(C:/Users/Surya/Downloads/Sample/birds1.jpg)2modcopyImagewrite(C:/Users/Surya/Downloads/Sample/new111.jpg)";
    	  ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	  PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 }

    	 @Test
    	 public void prog10() throws Exception {
    	  //scan, parse, and type check the program
    	  String progname = "prog10";
    	  String input = progname + " file in {image i frame f in -> i; i-> scale(2) ->i; i -> f; f -> show; sleep(10000);}";
    	  Scanner scanner = new Scanner(input);
    	  scanner.scan();
    	  Parser parser = new Parser(scanner);
    	  ASTNode program = parser.parse();
    	  TypeCheckVisitor v = new TypeCheckVisitor();
    	  PLPRuntimeLog.initLog();
    	  program.visit(v, null);
    	  show(program);

    	  //generate code
    	  CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	  byte[] bytecode = (byte[]) program.visit(cv, null);

    	  //output the generated bytecode
    	  CodeGenUtils.dumpBytecode(bytecode);

    	  //write byte code to file
    	  String name = ((Program) program).getName();
    	  String classFileName = "bin/" + name + ".class";
    	  OutputStream output = new FileOutputStream(classFileName);
    	  output.write(bytecode);
    	  output.close();
    	  System.out.println("wrote classfile to " + classFileName);

    	  // directly execute bytecode
    	  String[] args = new String[]{"C:/Users/Surya/Downloads/Sample/birds1.jpg"}; //create command line argument array to initialize params, none in this case
    	  Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    	  String expOut = "readFromFile(C:/Users/Surya/Downloads/Sample/birds1.jpg)scalecreateOrSetFrameshowImage";
    	  ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	  PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 }

    	 @Test
    	 public void prog11() throws Exception {
    	  //scan, parse, and type check the program
    	  String progname = "prog11";
    	  String input = progname + " url in, file out {image i in -> i; i -> gray -> out;}";
    	  Scanner scanner = new Scanner(input);
    	  scanner.scan();
    	  Parser parser = new Parser(scanner);
    	  ASTNode program = parser.parse();
    	  TypeCheckVisitor v = new TypeCheckVisitor();
    	  PLPRuntimeLog.initLog();
    	  program.visit(v, null);
    	  show(program);

    	  //generate code
    	  CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	  byte[] bytecode = (byte[]) program.visit(cv, null);

    	  //output the generated bytecode
    	  CodeGenUtils.dumpBytecode(bytecode);

    	  //write byte code to file
    	  String name = ((Program) program).getName();
    	  String classFileName = "bin/" + name + ".class";
    	  OutputStream output = new FileOutputStream(classFileName);
    	  output.write(bytecode);
    	  output.close();
    	  System.out.println("wrote classfile to " + classFileName);

    	  // directly execute bytecode
    	  String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg", "C:/Users/Surya/Downloads/Sample/new111.jpg"}; //create command line argument array to initialize params, none in this case
    	  Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    	  String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)grayOpwrite(C:/Users/Surya/Downloads/Sample/new111.jpg)";
    	  ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	  PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 }

    	 @Test
    	 public void prog12() throws Exception {
    	  //scan, parse, and type check the program
    	  String progname = "prog12";
    	  String input = progname + " url u, file f {image i u->blur->i->f;}";
    	  Scanner scanner = new Scanner(input);
    	  scanner.scan();
    	  Parser parser = new Parser(scanner);
    	  ASTNode program = parser.parse();
    	  TypeCheckVisitor v = new TypeCheckVisitor();
    	  PLPRuntimeLog.initLog();
    	  program.visit(v, null);
    	  show(program);

    	  //generate code
    	  CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	  byte[] bytecode = (byte[]) program.visit(cv, null);

    	  //output the generated bytecode
    	  CodeGenUtils.dumpBytecode(bytecode);

    	  //write byte code to file
    	  String name = ((Program) program).getName();
    	  String classFileName = "bin/" + name + ".class";
    	  OutputStream output = new FileOutputStream(classFileName);
    	  output.write(bytecode);
    	  output.close();
    	  System.out.println("wrote classfile to " + classFileName);

    	  // directly execute bytecode
    	  String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg", "C:/Users/Surya/Downloads/Sample/new111.jpg"}; //create command line argument array to initialize params, none in this case
    	  Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    	  String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)blurOpwrite(C:/Users/Surya/Downloads/Sample/new111.jpg)";
    	  ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	  PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 }

//    	 @Test
    	 public void prog13() throws Exception {
    	  //scan, parse, and type check the program
    	  String progname = "prog13";
    	  String input = progname + " url u, file f {"
    	  		+ "integer int "
    	  		+ "int <- 2; "
    	  		+ "image i "
    	  		+ "u->scale(int)->i->f;}";
    	  Scanner scanner = new Scanner(input);
    	  scanner.scan();
    	  Parser parser = new Parser(scanner);
    	  ASTNode program = parser.parse();
    	  TypeCheckVisitor v = new TypeCheckVisitor();
    	  PLPRuntimeLog.initLog();
    	  program.visit(v, null);
    	  show(program);

    	  //generate code
    	  CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	  byte[] bytecode = (byte[]) program.visit(cv, null);

    	  //output the generated bytecode
    	  CodeGenUtils.dumpBytecode(bytecode);

    	  //write byte code to file
    	  String name = ((Program) program).getName();
    	  String classFileName = "bin/" + name + ".class";
    	  OutputStream output = new FileOutputStream(classFileName);
    	  output.write(bytecode);
    	  output.close();
    	  System.out.println("wrote classfile to " + classFileName);

    	  // directly execute bytecode
    	  String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg", "C:/Users/Surya/Downloads/Sample/new111.jpg"}; //create command line argument array to initialize params, none in this case
    	  Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    	  String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)2readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)scalewrite(C:/Users/Surya/Downloads/Sample/new111.jpg)";
    	  ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	  PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 }

//    	 @Test
    	 public void prog14() throws Exception {
    	  //scan, parse, and type check the program
    	  String progname = "prog14";
    	  String input = progname + " file in {image i \n in -> i; \n i |-> convolve; i -> in;} ";
    	  Scanner scanner = new Scanner(input);
    	  scanner.scan();
    	  Parser parser = new Parser(scanner);
    	  ASTNode program = parser.parse();
    	  TypeCheckVisitor v = new TypeCheckVisitor();
    	  PLPRuntimeLog.initLog();
    	  program.visit(v, null);
    	  show(program);

    	  //generate code
    	  CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	  byte[] bytecode = (byte[]) program.visit(cv, null);

    	  //output the generated bytecode
    	  CodeGenUtils.dumpBytecode(bytecode);

    	  //write byte code to file
    	  String name = ((Program) program).getName();
    	  String classFileName = "bin/" + name + ".class";
    	  OutputStream output = new FileOutputStream(classFileName);
    	  output.write(bytecode);
    	  output.close();
    	  System.out.println("wrote classfile to " + classFileName);

    	  // directly execute bytecode
    	  String[] args = new String[]{"C:/Users/Surya/Downloads/Sample/birds1.jpg"}; //create command line argument array to initialize params, none in this case
    	  Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    	  String expOut = "readFromFile(C:/Users/Surya/Downloads/Sample/birds1.jpg)convolvewrite(C:/Users/Surya/Downloads/Sample/birds1.jpg)";
    	  ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	  PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 }

    	 @Test
    	 public void subImage56() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "subImage";
    	 String input = progname + " url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)subcopyImagecreateOrSetFrameshowImage";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }

    	 @Test
    	 public void readFromURLandWriteToFile27() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "readFromURLandWriteToFile2";
    	 String input = progname + " url u, \nfile out \n{image i frame f \nu -> gray -> i;\n i -> f -> show; \n i -> out;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg", "C:/Users/Surya/Downloads/Sample/new111.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)grayOpcreateOrSetFrameshowImagewrite(C:/Users/Surya/Downloads/Sample/new111.jpg)";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void sleepImg67() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "sleepImg";
    	 String input = progname + " url u {image i frame f \nu -> i -> convolve -> f -> show;sleep 5;integer j j <- 42;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)convolvecreateOrSetFrameshowImage42";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void addImage67() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "addImage";
    	 String input = progname + " url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show; sleep 5; k <- k + i; k -> f -> show; \n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)subcopyImagecreateOrSetFrameshowImageaddcopyImagecreateOrSetFrameshowImageshowImage";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void convolveImg67() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "convolveImg";
    	 String input = progname + " url u {image i frame f \nu -> i -> convolve -> f -> show;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)convolvecreateOrSetFrameshowImage";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void readFromURLandDisplay() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "readFromURLandDisplay";
    	 String input = progname + " url u {image i frame f \nu -> i;i -> f -> show;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)createOrSetFrameshowImage";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void imgMove27() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "imgMove2";
    	 String input = progname + " url u {"
    	 		+ "image i frame f \n"
    	 		+ "u -> i;i -> f -> show; \nsleep 5; \n"
    	 		+ "integer x \ninteger y \n"
    	 		+ "x <- screenwidth;\ny <- screenheight; \nf -> move (x*3/4,y/4) -> show;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)createOrSetFrameshowImagegetScreenWidth1680getScreenHeight1050moveFrameshowImage";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void subImage27() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "subImage2";
    	 String input = progname + " url u {image i image j frame f \nu -> i; \nu -> j; \n i <- i-j; i -> f -> show;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)subcopyImagecreateOrSetFrameshowImage";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void modImage() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "modImage";
    	 String input = progname + " url u {image i image j frame f \nu -> j; \n i <- j%128; i -> f -> show;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)modcopyImagecreateOrSetFrameshowImage";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void allTheOps67() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "allTheOps";
    	 String input = progname + " file u {image i frame f \nu -> i -> gray -> convolve -> blur -> i -> f -> show;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"C:/Users/Surya/Downloads/Sample/birds1.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "readFromFile(C:/Users/Surya/Downloads/Sample/birds1.jpg)grayOpconvolveblurOpcreateOrSetFrameshowImage";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void readFromURLandDisplayDisplay27() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "readFromURLandDisplayDisplay2";
    	 String input = progname + " url u {image i frame f \nu -> i -> f -> show;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)createOrSetFrameshowImage";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void readFromURLandWriteToFile() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "readFromURLandWriteToFile";
    	 String input = progname + " url u, \nfile out \n{image i frame f \nu -> i;i -> f -> show; \n i -> out;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg", "C:/Users/Surya/Downloads/Sample/new111.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)createOrSetFrameshowImagewrite(C:/Users/Surya/Downloads/Sample/new111.jpg)";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void blurImg1() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "blurImg";
    	 String input = progname + " url u {image i frame f \nu -> i -> blur -> f -> show;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)blurOpcreateOrSetFrameshowImage";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void grayImg67() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "grayImg";
    	 String input = progname + " url u {image i frame f \nu -> i -> gray -> f -> show;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)grayOpcreateOrSetFrameshowImage";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void divImage67() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "divImage";
    	 String input = progname + " url u {image i image j frame f \nu -> j; \n i <- j/2; i -> f -> show;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)divcopyImagecreateOrSetFrameshowImage";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void readFromURLandWriteScaledImageToFile67() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "readFromURLandWriteScaledImageToFile";
    	 String input = progname + " url u, \nfile out \n{image i frame f \nu -> scale (3) -> i;i -> f -> show; \n i -> out;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg", "C:/Users/Surya/Downloads/Sample/new111.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)scalecreateOrSetFrameshowImagewrite(C:/Users/Surya/Downloads/Sample/new111.jpg)";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void readFromFile67() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "readFromFile";
    	 String input = progname + " file u {image i frame f \nu -> i;i -> f -> show; \n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"C:/Users/Surya/Downloads/Sample/birds2.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "readFromFile(C:/Users/Surya/Downloads/Sample/birds2.jpg)createOrSetFrameshowImage";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void barArrowGray() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "barArrowGray";
    	 String input = progname + " url u {image i frame f \nu -> i |-> gray -> f -> show;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)grayOpcreateOrSetFrameshowImage";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void assignImage67() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "assignImage";
    	 String input = progname + " url u {image i image j frame f \nu -> i; j <- i;j -> f -> show;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)copyImagecreateOrSetFrameshowImage";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void scaleImage() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "scaleImage";
    	 String input = progname + " url u {image i frame f \nu -> i -> f -> show; frame f2 \ni -> scale (3) -> f2 -> show;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)createOrSetFrameshowImagescalecreateOrSetFrameshowImage";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void imgMove67() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "imgMove";
    	 String input = progname + " url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \nf -> xloc -> x; \nf -> yloc -> y; \nf -> move (x+100,y-100) -> show;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)createOrSetFrameshowImagegetXgetYmoveFrameshowImage";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }
    	 @Test
    	 public void assignImageAndFrame78() throws Exception {
    	 //scan, parse, and type check the program
    	 String progname = "assignImageAndFrame";
    	 String input = progname + " url u {image i image i1 frame f frame f1\nu -> i -> f -> show; frame f2 \ni -> scale (3) -> f2 -> show; \n i1 <- i; \n f2 <- f;\n}";
    	 Scanner scanner = new Scanner(input);
    	 scanner.scan();
    	 Parser parser = new Parser(scanner);
    	 ASTNode program = parser.parse();
    	 TypeCheckVisitor v = new TypeCheckVisitor();
    	 PLPRuntimeLog.initLog();
    	 program.visit(v, null);
    	 show(program);
    	 //generate code
    	 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    	 byte[] bytecode = (byte[]) program.visit(cv, null);
    	 //output the generated bytecode
    	 CodeGenUtils.dumpBytecode(bytecode);
    	 //write byte code to file
    	 String name = ((Program) program).getName();
    	 String classFileName = "bin/" + name + ".class";
    	 OutputStream output = new FileOutputStream(classFileName);
    	 output.write(bytecode);
    	 output.close();
    	 System.out.println("wrote classfile to " + classFileName);
    	 // directly execute bytecode
    	 String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    	 Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    	 String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)createOrSetFrameshowImagescalecreateOrSetFrameshowImagecopyImage";
    	 ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    	 PrintStream oldStream = System.out;
    	     System.setOut(new PrintStream(outContent));
    	     instance.run();
    	     assertEquals(expOut, PLPRuntimeLog.getString());
    	     System.setOut(oldStream);
    	 instance.run();
    	 }

    	 @Test
     		public void assng6Test04() throws Exception {
     		String name = "testSelfBararrowGray";
     		String input = name + " file file1, file file2{image a image b frame f1 frame f2 \n file1->a|->gray->b; a->f1->show; sleep(3000); b->f2->show; sleep(3000); a->file2;}";
     		Scanner scanner = new Scanner(input);
     		scanner.scan();
     		Parser parser = new Parser(scanner);
     		ASTNode program = parser.parse();
     		TypeCheckVisitor v = new TypeCheckVisitor();
     		program.visit(v, null);
     		show("\n\n" + program);

     		//generate code
     		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
     		byte[] bytecode = (byte[]) program.visit(cv, null);

     		//output the generated bytecode
     		CodeGenUtils.dumpBytecode(bytecode);

     		//write byte code to file
     		String classFileName = "bin/" + ((Program) program).getName() + ".class";
     		OutputStream output = new FileOutputStream(classFileName);
     		output.write(bytecode);
     		output.close();
     		show("wrote classfile to " + classFileName);

     		// directly execute bytecode
     		String[] args = new String[2]; //create String[] array to initialize params

     		args[0] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");
     		args[1] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");
     		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
     		instance.run();
     	}

    	@Test
  		public void assng6Test046() throws Exception {
  		String name = "testArrowGray";
  		String input = name + " file file1, file file2{image a image b frame f1 frame f2 \n file1->a->gray->b; a->f1->show; sleep(3000); b->f2->show; sleep(3000); a->file2;}";
  		Scanner scanner = new Scanner(input);
  		scanner.scan();
  		Parser parser = new Parser(scanner);
  		ASTNode program = parser.parse();
  		TypeCheckVisitor v = new TypeCheckVisitor();
  		program.visit(v, null);
  		show("\n\n" + program);

  		//generate code
  		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
  		byte[] bytecode = (byte[]) program.visit(cv, null);

  		//output the generated bytecode
  		CodeGenUtils.dumpBytecode(bytecode);

  		//write byte code to file
  		String classFileName = "bin/" + ((Program) program).getName() + ".class";
  		OutputStream output = new FileOutputStream(classFileName);
  		output.write(bytecode);
  		output.close();
  		show("wrote classfile to " + classFileName);

  		// directly execute bytecode
  		String[] args = new String[2]; //create String[] array to initialize params

  		args[0] = new String("C:/Users/Surya/Downloads/Sample/birds1.jpg");
  		args[1] = new String("C:/Users/Surya/Downloads/Sample/birds2.jpg");
  		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
  		instance.run();
  	}

    	@Test
  		public void assng6Test0467() throws Exception {
  		String name = "barArrowGray";
  		String input = name + " url u {image i frame f \nu -> i |-> gray -> f -> show;\n}";
  		Scanner scanner = new Scanner(input);
  		scanner.scan();
  		Parser parser = new Parser(scanner);
  		ASTNode program = parser.parse();
  		TypeCheckVisitor v = new TypeCheckVisitor();
  		program.visit(v, null);
  		show("\n\n" + program);

  		//generate code
  		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
  		byte[] bytecode = (byte[]) program.visit(cv, null);

  		//output the generated bytecode
  		CodeGenUtils.dumpBytecode(bytecode);

  		//write byte code to file
  		String classFileName = "bin/" + ((Program) program).getName() + ".class";
  		OutputStream output = new FileOutputStream(classFileName);
  		output.write(bytecode);
  		output.close();
  		show("wrote classfile to " + classFileName);

  		// directly execute bytecode
  		String[] args = new String[2]; //create String[] array to initialize params

  		args[0] = new String("http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg");
  		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
  		instance.run();
  	}

    	public void subImage() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "subImage";
    		String input = progname + " url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)subcopyImagecreateOrSetFrameshowImage";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void readFromURLandWriteToFile2() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "readFromURLandWriteToFile2";
    		String input = progname + " url u, \nfile out \n{image i frame f \nu -> gray -> i;\n i -> f -> show; \n i -> out;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg", "C:/Users/Surya/Downloads/Sample/out1.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)grayOpcreateOrSetFrameshowImagewrite(C:/Users/Surya/Downloads/Sample/out1.jpg)";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void sleepImg() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "sleepImg";
    		String input = progname + " url u {image i frame f \n"
    				+ "u -> i -> convolve -> "
    				+ "f -> show;"
    				+ ""
    				+ "sleep 5;integer j j <- 42;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)convolvecreateOrSetFrameshowImage42";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void addImage() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "addImage";
    		String input = progname + " url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show; sleep 5; k <- k + i; k -> f -> show; \n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)subcopyImagecreateOrSetFrameshowImageaddcopyImagecreateOrSetFrameshowImageshowImage";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void convolveImg() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "convolveImg";
    		String input = progname + " url u {image i frame f \nu -> i -> convolve -> f -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)convolvecreateOrSetFrameshowImage";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void readFromURLandDisplay67() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "readFromURLandDisplay";
    		String input = progname + " url u {image i frame f \nu -> i;i -> f -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)createOrSetFrameshowImage";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void imgMove2() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "imgMove2";
    		String input = progname + " url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \nx <- screenwidth;\ny <- screenheight; \nf -> move (x*3/4,y/4) -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)createOrSetFrameshowImagegetScreenWidth1680getScreenHeight1050moveFrameshowImage";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void subImage2() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "subImage2";
    		String input = progname + " url u {image i image j frame f \nu -> i; \nu -> j; \n i <- i-j; i -> f -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)subcopyImagecreateOrSetFrameshowImage";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void modImage67() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "modImage";
    		String input = progname + " url u {image i image j frame f \nu -> j; \n i <- j%128; i -> f -> show;sleep (1000);\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)modcopyImagecreateOrSetFrameshowImage";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void allTheOps() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "allTheOps";
    		String input = progname + " file u {image i frame f \n"
    				+ "u -> i -> gray -> convolve -> blur -> i -> f -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"C:/Users/Surya/Downloads/Sample/birds1.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "readFromFile(images\\bj.jpg)grayOpconvolveblurOpcreateOrSetFrameshowImage";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void readFromURLandDisplayDisplay2() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "readFromURLandDisplayDisplay2";
    		String input = progname + " url u {image i frame f \nu -> i -> f -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)createOrSetFrameshowImage";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void readFromURLandWriteToFile67() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "readFromURLandWriteToFile";
    		String input = progname + " url u, \nfile out \n{image i frame f \nu -> i;i -> f -> show; \n i -> out;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg", "C:/Users/Surya/Downloads/Sample/new111.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)createOrSetFrameshowImagewrite(C:/Users/Surya/Downloads/Sample/new111.jpg)";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void blurImg() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "blurImg";
    		String input = progname + " url u {image i frame f \nu -> i -> blur -> f -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)blurOpcreateOrSetFrameshowImage";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void grayImg() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "grayImg";
    		String input = progname + " url u {image i frame f \nu -> i -> gray -> f -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)grayOpcreateOrSetFrameshowImage";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void divImage() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "divImage";
    		String input = progname + " url u {image i image j frame f \nu -> j; \n i <- j/2; i -> f -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)divcopyImagecreateOrSetFrameshowImage";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void readFromURLandWriteScaledImageToFile() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "readFromURLandWriteScaledImageToFile";
    		String input = progname + " url u, \nfile out \n{image i frame f \nu -> scale (3) -> i;i -> f -> show; \n i -> out;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg", "C:/Users/Surya/Downloads/Sample/new111.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)scalecreateOrSetFrameshowImagewrite(C:/Users/Surya/Downloads/Sample/new111.jpg)";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void readFromFile() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "readFromFile";
    		String input = progname + " file u {image i frame f \nu -> i;i -> f -> show; \n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"C:/Users/Surya/Downloads/Sample/birds1.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "readFromFile(C:/Users/Surya/Downloads/Sample/birds1.jpg)createOrSetFrameshowImage";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void barArrowGray67() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "barArrowGray";
    		String input = progname + " url u {image i frame f \nu -> i |-> gray -> f -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)grayOpcreateOrSetFrameshowImage";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void assignImage() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "assignImage";
    		String input = progname + " url u {image i image j frame f \nu -> i; j <- i;j -> f -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)copyImagecreateOrSetFrameshowImage";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void scaleImage67() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "scaleImage";
    		String input = progname + " url u {image i frame f \nu -> i -> f -> show; frame f2 \ni -> scale (3) -> f2 -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)createOrSetFrameshowImagescalecreateOrSetFrameshowImage";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void imgMove() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "imgMove";
    		String input = progname + " url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \nf -> xloc -> x; \nf -> yloc -> y; \nf -> move (x+100,y-100) -> show;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)createOrSetFrameshowImagegetXgetYmoveFrameshowImage";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void assignImageAndFrame() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "assignImageAndFrame";
    		String input = progname + " url u {image i image i1 frame f frame f1\nu -> i -> f -> show; frame f2 \ni -> scale (3) -> f2 -> show; \n i1 <- i; \n f2 <- f;\n}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[]{"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)createOrSetFrameshowImagescalecreateOrSetFrameshowImagecopyImage";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void booleanComp1() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "booleanComp1";
    		String input = progname + " "
    				+ " { boolean x  x<- true == false;boolean y  y<- true != false;boolean z  z<- true | false;z<- x|y;z<- x&y;} ";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[0]; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "falsetruetruetruefalse";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void booleanBinaryExpression2() throws Exception {
    		//scan, parse, and type check the program
    		String progname = "booleanBinaryExpression2";
    		String input = progname + " "
    				+ "\nboolean  b0, boolean b1{  \n boolean b3 boolean b4 b3 <- b0 & b1; b4 <- b0 | b1;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		PLPRuntimeLog.initLog();
    		program.visit(v, null);
    		show(program);
    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);
    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);
    		//write byte code to file
    		String name = ((Program) program).getName();
    		String classFileName = "bin/" + name + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		System.out.println("wrote classfile to " + classFileName);
    		// directly execute bytecode
    		String[] args = new String[] {"false","true"}; //create command line argument array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		String expOut = "falsetrue";
    		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    		PrintStream oldStream = System.out;
    		    System.setOut(new PrintStream(outContent));
    		    instance.run();
    		    assertEquals(expOut, PLPRuntimeLog.getString());
    		    System.setOut(oldStream);
    		instance.run();
    		}
    		@Test
    		public void readFromURLandWriteToFile3() throws Exception {
    			// scan, parse, and type check the program
    			String progname = "readFromURLandWriteToFile3";
    			String input = progname + "  url u, \nfile out \n{\nu -> gray  -> out;\n}";
    			Scanner scanner = new Scanner(input);
    			scanner.scan();
    			Parser parser = new Parser(scanner);
    			ASTNode program = parser.parse();
    			TypeCheckVisitor v = new TypeCheckVisitor();
    			program.visit(v, null);
    			show(program);
    			// generate code
    			CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    			byte[] bytecode = (byte[]) program.visit(cv, null);
    			// output the generated bytecode
    			CodeGenUtils.dumpBytecode(bytecode);
    			// write byte code to file
    			String name = ((Program) program).getName();
    			String classFileName = "bin/" + name + ".class";
    			OutputStream output = new FileOutputStream(classFileName);
    			output.write(bytecode);
    			output.close();
    			System.out.println("wrote classfile to " + classFileName);
    			// directly execute bytecode
    			String[] args = new String[] { "http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg",
    					"C:\\Users\\Surya\\Downloads\\Sample\\out2.jpg" };
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)grayOpwrite(C:\\Users\\Surya\\Downloads\\Sample\\out2.jpg)";
    			ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    			PrintStream oldStream = System.out;
    			    System.setOut(new PrintStream(outContent));
    			    instance.run();
    			    assertEquals(expOut, PLPRuntimeLog.getString());
    			    System.setOut(oldStream);
    			instance.run();
    		}
    		@Test
    		public void fibonacci() throws Exception {
    			// scan, parse, and type check the program
    			String progname = "fibonacci";
    			String input = progname
    					+ "  integer n {\n   integer result result<-0;\n   if(n == 0){\n    result<- 0;\n  }\n  if(n == 1){\n    result<- 1;\n  }\n  if(n > 1){\n    integer fib1 fib1<- 0;\n    integer fib2 fib2<- 1;\n    integer idx idx<- 2;\n    while(idx < n){      integer tmp tmp<- fib1 + fib2;\n      fib1<- fib2;\n      fib2<- tmp;\n      idx<- idx + 1;\n    }\n    result<- fib1+fib2;\n  }\n}";
    			Scanner scanner = new Scanner(input);
    			scanner.scan();
    			Parser parser = new Parser(scanner);
    			ASTNode program = parser.parse();
    			TypeCheckVisitor v = new TypeCheckVisitor();
    			program.visit(v, null);
    			show(program);
    			// generate code
    			CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    			byte[] bytecode = (byte[]) program.visit(cv, null);
    			// output the generated bytecode
    			CodeGenUtils.dumpBytecode(bytecode);
    			// write byte code to file
    			String name = ((Program) program).getName();
    			String classFileName = "bin/" + name + ".class";
    			OutputStream output = new FileOutputStream(classFileName);
    			output.write(bytecode);
    			output.close();
    			System.out.println("wrote classfile to " + classFileName);
    			// directly execute bytecode
    			String[] args = new String[] { "10" };
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		}
    		@Test
    		public void booleanBinaryExpression3() throws Exception {
    			// scan, parse, and type check the program
    			String progname = "booleanBinaryExpression3";
    			String input = progname
    					+ " boolean  b0, boolean b1{  \n boolean b3 boolean b4 b3 <- b0 & b1; b4 <- b0 | b1;}";
    			Scanner scanner = new Scanner(input);
    			scanner.scan();
    			Parser parser = new Parser(scanner);
    			ASTNode program = parser.parse();
    			TypeCheckVisitor v = new TypeCheckVisitor();
    			program.visit(v, null);
    			show(program);
    			// generate code
    			CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    			byte[] bytecode = (byte[]) program.visit(cv, null);
    			// output the generated bytecode
    			CodeGenUtils.dumpBytecode(bytecode);
    			// write byte code to file
    			String name = ((Program) program).getName();
    			String classFileName = "bin/" + name + ".class";
    			OutputStream output = new FileOutputStream(classFileName);
    			output.write(bytecode);
    			output.close();
    			System.out.println("wrote classfile to " + classFileName);
    			// directly execute bytecode
    			String[] args = new String[] { "true","false" };
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		}
    		@Test
    		public void booleanBinaryExpression() throws Exception {
    			// scan, parse, and type check the program
    			String progname = "booleanBinaryExpression";
    			String input = progname
    					+ " boolean  b0, boolean b1{  \n boolean b3 boolean b4 b3 <- b0 & b1; b4 <- b0 | b1;}";
    			Scanner scanner = new Scanner(input);
    			scanner.scan();
    			Parser parser = new Parser(scanner);
    			ASTNode program = parser.parse();
    			TypeCheckVisitor v = new TypeCheckVisitor();
    			program.visit(v, null);
    			show(program);
    			// generate code
    			CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    			byte[] bytecode = (byte[]) program.visit(cv, null);
    			// output the generated bytecode
    			CodeGenUtils.dumpBytecode(bytecode);
    			// write byte code to file
    			String name = ((Program) program).getName();
    			String classFileName = "bin/" + name + ".class";
    			OutputStream output = new FileOutputStream(classFileName);
    			output.write(bytecode);
    			output.close();
    			System.out.println("wrote classfile to " + classFileName);
    			// directly execute bytecode
    			String[] args = new String[] { "true", "false" };
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			instance.run();
    		}

    		@Test
    		public void testImageEqual() throws Exception {
    			// scan, parse, and type check the program
    			String progname = "testImageEqual";
    			String input = progname + " url u1, url u2 {"
    					+ "image i1 frame f "
    					+ "u1 -> i1 ; "
    					+ "image i2 \n "
    					+ "u2 -> i2; "
    					+ "if(i1!=i2)\n{"
    					+ "		\n  i1->scale(2)->i1->f->show; "
    					+ "			sleep(1000); "
    					+ "			i2->convolve->i2->f->show; "
    					+ "			sleep(1000);}"
    					+ "}";
    			Scanner scanner = new Scanner(input);
    			scanner.scan();
    			Parser parser = new Parser(scanner);
    			ASTNode program = parser.parse();
    			TypeCheckVisitor v = new TypeCheckVisitor();
    			PLPRuntimeLog.initLog();
    			program.visit(v, null);
    			show(program);
    			//generate code
    			CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    			byte[] bytecode = (byte[]) program.visit(cv, null);
    			//output the generated bytecode
    			CodeGenUtils.dumpBytecode(bytecode);
    			//write byte code to file
    			String name = ((Program) program).getName();
    			String classFileName = "bin/" + name + ".class";
    			OutputStream output = new FileOutputStream(classFileName);
    			output.write(bytecode);
    			output.close();
    			System.out.println("wrote classfile to " + classFileName);
    			// directly execute bytecode
    			String[] args = new String[]{
    					"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg",
    					"http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg"
//    					"http://www.thebetterindia.com/wp-content/uploads/2015/05/tree.jpg"
    					};
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			String expOut = "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)"
    					+ "getURL(http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL("
    					+ "http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)readFromURL("
    					+ "http://samlib.ru/img/b/bojko_maksim/wybor/ale.jpg)scalecreateOrSetFrameshowImageconvolvecreateOrSetFrameshowImageshowImage";
    			ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    			PrintStream oldStream = System.out;
    			    System.setOut(new PrintStream(outContent));
    			    instance.run();
    			    assertEquals(expOut, PLPRuntimeLog.getString());
    			    System.setOut(oldStream);
    			instance.run();
    		}
    		@Test
    		public void testWhile() throws Exception {
    			// scan, parse, and type check the program
    			String progname = "testWhile";
    			String input = progname + " file f1, file f2 {image i1 frame f f1 -> i1 ; image i2 \n f2 -> i2; integer x x<-5; while(x > 0)\n{\n  i1 <- i1 + i2; i1->f->show; sleep(1000); i2 <- i2*1/2; i2 -> convolve->f->show; sleep(1000); x<- x-1;}}";
    			Scanner scanner = new Scanner(input);
    			scanner.scan();
    			Parser parser = new Parser(scanner);
    			ASTNode program = parser.parse();
    			TypeCheckVisitor v = new TypeCheckVisitor();
    			PLPRuntimeLog.initLog();
    			program.visit(v, null);
    			show(program);
    			//generate code
    			CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
    			byte[] bytecode = (byte[]) program.visit(cv, null);
    			//output the generated bytecode
    			CodeGenUtils.dumpBytecode(bytecode);
    			//write byte code to file
    			String name = ((Program) program).getName();
    			String classFileName = "bin/" + name + ".class";
    			OutputStream output = new FileOutputStream(classFileName);
    			output.write(bytecode);
    			output.close();
    			System.out.println("wrote classfile to " + classFileName);
    			// directly execute bytecode
    			String[] args = new String[]{"C:/Users/Surya/Downloads/Sample/birds1.jpg","C:/Users/Surya/Downloads/Sample/birds2.jpg"}; //create command line argument array to initialize params
    			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    			String expOut = "readFromFile(C:\\Users\\Surya\\Downloads\\Sample\\birds1.jpg)readFromFile(C:/Users/Surya/Downloads/Sample/birds2.jpg)5addcopyImagecreateOrSetFrameshowImagemuldivcopyImageconvolvecreateOrSetFrameshowImageshowImage4addcopyImagecreateOrSetFrameshowImageshowImagemuldivcopyImageconvolvecreateOrSetFrameshowImageshowImage3addcopyImagecreateOrSetFrameshowImageshowImagemuldivcopyImageconvolvecreateOrSetFrameshowImageshowImage2addcopyImagecreateOrSetFrameshowImageshowImagemuldivcopyImageconvolvecreateOrSetFrameshowImageshowImage1addcopyImagecreateOrSetFrameshowImageshowImagemuldivcopyImageconvolvecreateOrSetFrameshowImageshowImage0";
    			ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    			PrintStream oldStream = System.out;
    			    System.setOut(new PrintStream(outContent));
    			    instance.run();
    			    assertEquals(expOut, PLPRuntimeLog.getString());
    			    System.setOut(oldStream);
    			instance.run();
    		}

}



