


package cop5556sp17;



import java.io.ByteArrayOutputStream;

import java.io.FileOutputStream;

import java.io.OutputStream;

import java.io.PrintStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;

import org.junit.Test;

import static org.junit.Assert.*;

import org.junit.rules.ExpectedException;



import cop5556sp17.AST.ASTNode;

import cop5556sp17.AST.Program;







public class CodeGenVisitorTestSree {



        static final boolean doPrint = true;
        @Before
        public void initLog(){
        if (devel || grade) PLPRuntimeLog.initLog();
        }
        @After
        public void printLog(){
        System.out.println(PLPRuntimeLog.getString());
        }
        static void show(Object s) {

                if (doPrint) {

                        System.out.println(s);

                }

        }



        @Rule

        public ExpectedException thrown = ExpectedException.none();



        boolean devel = false;

        boolean grade = true;





        @Test

        public void emptyProg() throws Exception {

                //scan, parse, and type check the program

                String progname = "emptyProg";

                String input = progname + "  {}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        @Test

        public void testSimple() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple";

                String input = progname + " {integer a integer b b<-10; a<-b;}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        @Test

        public void testSimple2() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple1";

                String input = progname + " {boolean a boolean b b<-true; a<-b;}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        @Test

        public void testIfTrue() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple2";

                String input = progname + " {boolean a boolean b if(true) {b<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfTrueBinaryPlus() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple3";

                String input = progname + " {integer a boolean b if(true) {a<-4+5;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfTrueBinaryMinus() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple4";

                String input = progname + " {integer a boolean b if(true) {a<-4-5;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfTrueBinaryMul() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple5";

                String input = progname + " {integer a boolean b if(true) {a<-4*5;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfTrueBinaryDiv() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple6";

                String input = progname + " {integer a boolean b if(true) {a<-10/2;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfFalse() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple7";

                String input = progname + " {boolean a boolean b if(false) {b<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        @Test

        public void testIfByIdentLit() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple8";

                String input = progname + " {boolean a boolean b b<-true; if(b) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }







        public void testIfErrorUndefined() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple9";

                String input = progname + " {boolean a boolean b if(b) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfBinaryLE() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple10";

                String input = progname + " {boolean a boolean b b<-true; if(3<=3) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfBinaryLT() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple11";

                String input = progname + " {boolean a boolean b b<-true; if(3<10) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfBinaryGE() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple12";

                String input = progname + " {boolean a boolean b b<-true; if(10>=10) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfBinaryGT() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple13";

                String input = progname + " {boolean a boolean b b<-true; if(10>9) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileTrue() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple14";

                String input = progname + " {boolean a boolean b b<-true; while(b) {a<-true; b<-false;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileWithBinaryGT() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple15";

                String input = progname + " {integer a boolean b a<-5; while(a>3) { a<- a-1;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileWithBinaryGE() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple16";

                String input = progname + " {integer a boolean b a<-5; while(a>=3) { a<- a-1;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileWithBinaryLE() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple17";

                String input = progname + " {integer a integer b a<-5; b<-1; while(a<=8) { a<- a+b;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileWithBinaryLT() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple18";

                String input = progname + " {integer a integer b a<-5; b<-1; while(a<8) { a<- a+b;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfBinaryLEIntLitCondition() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple19";

                String input = progname + " {boolean a integer b integer c c<-6; b<-6; if(c<=b) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfBinaryLTIntLitCondition() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple20";

                String input = progname + " {boolean a integer b integer c c<-6; b<-4; if(b<c) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfBinaryGEIntLitCondition() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple21";

                String input = progname + " {boolean a integer b integer c c<-6; b<-4; if(c>=b) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfFailBinaryGT() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple22";

                String input = progname + " {boolean a integer b integer c c<-6; b<-4; if(b>c) {a<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileFalse() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple23";

                String input = progname + " {boolean a boolean b b<-false; while(b) {a<-true; b<-false;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileFailWithBinaryGT() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple24";

                String input = progname + " {integer a boolean b a<-5; while(a>6) { a<- a-1;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileFailWithBinaryGE() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple25";

                String input = progname + " {integer a boolean b a<-5; while(a>=6) { a<- a-1;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileFailWithBinaryLE() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple26";

                String input = progname + " {integer a integer b a<-5; b<-1; while(a<=4) { a<- a+b;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testWhileFailWithBinaryLT() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple27";

                String input = progname + " {integer a integer b a<-5; b<-1; while(a<5) { a<- a+b;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfParamDecInt() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple28";

                String input = progname + " integer abc {integer a if(abc<10) {a<-5;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"42"};

                //String[] args = new String[0];

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfParamDec2Int() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple29";

                String input = progname + " integer abc {integer a a<-abc; if(a>10) {a<-5;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"42"};

                //String[] args = new String[0];

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfParamDec3Int() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple30";

                String input = progname + " integer abc, integer def {integer a a<-abc; if(a+def>52) {a<-5;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"42","10"};

                //String[] args = new String[0];

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfParamDec4Int() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple31";

                String input = progname + " integer abc, integer def {integer a a<-abc; if(a+def>=52) {a<-5;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"42","10"};

                //String[] args = new String[0];

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfParamDec5Bool() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple32";

                String input = progname + " boolean abc {integer a if(abc) {a<-5;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"true"};

                //String[] args = new String[0];

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testIfParamDec6Bool() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple33";

                String input = progname + " boolean abc {integer a if(abc) {a<-5;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"false"};

                //String[] args = new String[0];

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        @Test

        public void testIfParamDec6BoolInt() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple34";

                String input = progname + " boolean boolLit, integer intLit {integer a if(boolLit) {a<-intLit;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"true", "30"};

                //String[] args = new String[0];

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testANDBoolean1() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple35";

                String input = progname + " {boolean a boolean b integer c a<-true; b<-true; if(a&b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testANDBoolean2() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple36";

                String input = progname + " {boolean a boolean b integer c a<-false; b<-true; if(a&b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testANDBoolean3() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple37";

                String input = progname + " {boolean a boolean b integer c a<-true; b<-false; if(a&b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testANDBoolean4() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple38";

                String input = progname + " {boolean a boolean b integer c a<-false; b<-false; if(a&b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testORBoolean1() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple39";

                String input = progname + " {boolean a boolean b integer c a<-false; b<-false; if(a|b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testORBoolean2() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple40";

                String input = progname + " {boolean a boolean b integer c a<-true; b<-false; if(a|b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testORBoolean3() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple41";

                String input = progname + " {boolean a boolean b integer c a<-false; b<-true; if(a|b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testORBoolean4() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple42";

                String input = progname + " {boolean a boolean b integer c a<-true; b<-true; if(a|b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testORParamDecBoolean1() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple43";

                String input = progname + " boolean a {boolean b integer c b<-false; integer ghi if(a|b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"TRUE"}; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }





        public void testANDParamDecBoolean1() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple44";

                String input = progname + " boolean a {boolean b integer c b<-true; if(a&b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"tRUe"}; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testANDParamDecBoolean2() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple45";

                String input = progname + " integer a {boolean b integer c b<-true; c<-6; if(a+c<=5){ c<-10; b<-false;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"2"}; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testANDParamDecBoolean3() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple46";

                String input = progname + " integer a, integer deb, boolean xyz { if(a+deb<=5){ xyz<-true;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"2", "67", "False"}; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



        @Test

        public void testBoolInt() throws Exception

        {

                //scan, parse, and type check the program

                String progname = "testSimple47";

                String input = progname + " integer temporary, boolean valid, integer number {boolean temporary temporary <- true; if(temporary) {valid <- false;number <- 6;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                assertEquals(progname, name);

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"2", "True", "3"}; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();



        }

        @Test

        public void testBoolIntnew() throws Exception

        {

                //scan, parse, and type check the program

                String progname = "testSimple47";

                String input = progname + " integer tp{ integer tp}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                assertEquals(progname, name);

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[]{"2", "True", "3"}; //create command line argument array to initialize params, none in this case

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();



        }

        @Test

    public void testBinaryExp() throws Exception

    {

    //scan, parse, and type check the program

    String progname = "testSimple48";

    String input = progname + "p {integer a integer b integer c integer d a <- 1; b <- 2; c <- 3; d <- 4; \nif((a*b)!=(c/d)){a <- 3;}}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show(program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String name = ((Program) program).getName();

    String classFileName = "bin/" + name + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    System.out.println("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[0]; //create command line argument array to initialize params, none in this case

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }

    //@Test

    public void testError() throws Exception

    {

    //scan, parse, and type check the program

    String progname = "testSimple49";

    String input = progname + " integer a {image f \n f -> scale(3);}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show(program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

    thrown.expect(AssertionError.class);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String name = ((Program) program).getName();

    String classFileName = "bin/" + name + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    System.out.println("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[0]; //create command line argument array to initialize params, none in this case

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();



    }



    @Test

    public void testBinaryExp1() throws Exception

    {

    //scan, parse, and type check the program

    String progname = "testSimple50";

    String input = progname + "p boolean xyz{integer a integer b integer c integer d a <- 1; b <- 2; c <- 3; d <- 4; \nif((a*b)!=(c/d)){a <- 3;}}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show(program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String name = ((Program) program).getName();

    String classFileName = "bin/" + name + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    System.out.println("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"3"}; //create command line argument array to initialize params, none in this case

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void testBinaryExp2() throws Exception

    {

    //scan, parse, and type check the program

    String progname = "testSimple50";

    String input = progname + "p boolean xyz{integer a integer b integer c integer d a <- 8; b <- 2; xyz<-false; c <- 3; d <- 4; \nif((a*b)!=(c/d)){a <- 3;}}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show(program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String name = ((Program) program).getName();

    String classFileName = "bin/" + name + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    System.out.println("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"3"}; //create command line argument array to initialize params, none in this case

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

        public void testANDBoolean34() throws Exception {

                //scan, parse, and type check the program

                String progname = "testSimple51";

                String input = progname + " {boolean a boolean b integer c a<-true; b<-false; if(a<b){ c<-10;}}";

                Scanner scanner = new Scanner(input);

                scanner.scan();

                Parser parser = new Parser(scanner);

                ASTNode program = parser.parse();

                TypeCheckVisitor v = new TypeCheckVisitor();

                program.visit(v, null);

                show(program);



                //generate code

                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

                byte[] bytecode = (byte[]) program.visit(cv, null);



                //output the generated bytecode

                CodeGenUtils.dumpBytecode(bytecode);



                //write byte code to file

                String name = ((Program) program).getName();

                String classFileName = "bin/" + name + ".class";

                OutputStream output = new FileOutputStream(classFileName);

                output.write(bytecode);

                output.close();

                System.out.println("wrote classfile to " + classFileName);



                // directly execute bytecode

                String[] args = new String[0]; //create command line argument array to initialize params, none in this case

                //args[0] = "5";

                Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

                instance.run();

        }



    @Test

    public void paramInitialization0() throws Exception {

    String name = "paramInitialization";

    String input = name + " integer i1 {integer i2 i2 <- i1;}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"42"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void paramInitialization1() throws Exception {

    String name = "paramInitialization";

    String input = name + " integer i1, integer i2 {integer i3 i3 <- i1 + i2;}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"42", "58"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void booleanLitExp0() throws Exception {

    String name = "booleanLitExp0";

    String input = name + " boolean b1, boolean b2 {boolean b3 b3 <- b1 < b2;}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"false", "true"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void booleanLitExp1() throws Exception {

    String name = "booleanLitExp1";

    String input = name + " boolean b1, boolean b2 {boolean b3 b3 <- b1 < b2;}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"true", "false"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void ifStatement0() throws Exception {

    String name = "ifStatement0";

    String _input = name + " boolean b1, boolean b2 {integer i1";

    String input = _input + " if (b1 < b2) {i1 <- 200;}}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"false", "true"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void ifStatement1() throws Exception {

    String name = "ifStatement1";

    String _input = name + " integer i1, integer i2 {integer i3";

    String input = _input + " if ((i1+i2) >= i2*2) {i3 <- i1+i2; i2 <- (i2*10 + i1/5) - i2*2;}}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"125", "25"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void ifStatement2() throws Exception {

    String name = "ifStatement2";

    String _input = name + " integer i1, integer i2, integer i4 {\n integer i3";

    _input = _input + " \nif ((i1+i2) >= i2*2) {\n integer i4 \n i3 <- i1+i2;";

    String input = _input + " \n i4 <- (i2*10 + i1/5) - i2*2;} \n i4 <- i4 - 10;}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"125", "25", "100"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void whileStatement0() throws Exception {

    String name = "whileStatement0";

    String _input = name + " integer i1, integer i2 {integer i3";

    String input = _input + " while (i1 < i2) {i3 <- i1+i2; i1 <- i1+1;}}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"0", "10"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void whileStatement1() throws Exception {

    String name = "whileStatement1";

    String _input = name + " integer i1, integer i2 {integer i3 i3 <- 0;";

    String input = _input + " while (i1 >= i2) {i3 <- i3+10; i1 <- i1-1;}}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"10", "0"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void whileStatement2() throws Exception {

    String name = "whileStatement2";

    String _input = name + " integer i1, integer i2 {integer i3 i3 <- 0;";

    String input = _input + " while (i1 > i2) {i3 <- (i3+10)*i2; i1 <- i1-1;}}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"10", "5"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    public void whileIfStatement0() throws Exception {

    String name = "whileIfStatement6";

    String _input = name + " integer i1, integer i2 {\n integer i3 \n i3 <- 0;";

    _input = _input + " \n while (i1 > i2) {\n i3 <- (i3+10*i1)/i2;\n i1 <- i1-1;";

    String input = _input + " \n if (i1 > 10) {\n i1 <- i1/2;}}}";

    Scanner scanner = new Scanner(input);

    scanner.scan();

    Parser parser = new Parser(scanner);

    ASTNode program = parser.parse();

    TypeCheckVisitor v = new TypeCheckVisitor();

    program.visit(v, null);

    show("\n\n" + program);



    //generate code

    CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

    byte[] bytecode = (byte[]) program.visit(cv, null);



    //output the generated bytecode

    CodeGenUtils.dumpBytecode(bytecode);



    //write byte code to file

    String classFileName = "bin/" + ((Program) program).getName() + ".class";

    OutputStream output = new FileOutputStream(classFileName);

    output.write(bytecode);

    output.close();

    show("wrote classfile to " + classFileName);



    // directly execute bytecode

    String[] args = new String[]{"50", "5"}; //create String[] array to initialize params

    Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);

    instance.run();

    }



    @Test

    	public void prog1() throws Exception {

      //scan, parse, and type check the program

      String progname = "prog1";

      String input = progname + " {integer i \n integer a \n integer b \n "
      		+ "a <- 10; \n b <- 15; \n i <- a + b;}";

      Scanner scanner = new Scanner(input);

      scanner.scan();

      Parser parser = new Parser(scanner);

      ASTNode program = parser.parse();

      TypeCheckVisitor v = new TypeCheckVisitor();

      program.visit(v, null);

      show(program);



      //generate code

      CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

      byte[] bytecode = (byte[]) program.visit(cv, null);



      //output the generated bytecode

      CodeGenUtils.dumpBytecode(bytecode);



      //write byte code to file

      String name = ((Program) program).getName();

      String classFileName = "bin/" + name + ".class";

      OutputStream output = new FileOutputStream(classFileName);

      output.write(bytecode);

      output.close();

      System.out.println("wrote classfile to " + classFileName);



      // directly execute bytecode

      String[] args = new String[0]; //create command line argument array to initialize params, none in this case

      Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);



      String expOut = "101525";

      ByteArrayOutputStream outContent = new ByteArrayOutputStream();

      PrintStream oldStream = System.out;

    	    System.setOut(new PrintStream(outContent));

    	    instance.run();

    	    assertEquals(expOut, outContent.toString());

    	    System.setOut(oldStream);



      instance.run();

    	}



    	@Test

    	public void prog2() throws Exception {

      //scan, parse, and type check the program

      String progname = "prog2";

      String input = progname + " {integer a \n integer b \n "
      		+ "a <- 22; \n b <- 2; \n while(a > b){b <- b * 2;} \n if(b == 32){b <- 1;}}";

      Scanner scanner = new Scanner(input);

      scanner.scan();

      Parser parser = new Parser(scanner);

      ASTNode program = parser.parse();

      TypeCheckVisitor v = new TypeCheckVisitor();

      program.visit(v, null);

      show(program);



      //generate code

      CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

      byte[] bytecode = (byte[]) program.visit(cv, null);



      //output the generated bytecode

      CodeGenUtils.dumpBytecode(bytecode);



      //write byte code to file

      String name = ((Program) program).getName();

      String classFileName = "bin/" + name + ".class";

      OutputStream output = new FileOutputStream(classFileName);

      output.write(bytecode);

      output.close();

      System.out.println("wrote classfile to " + classFileName);



      // directly execute bytecode

      String[] args = new String[0]; //create command line argument array to initialize params, none in this case

      Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);



      String expOut = "2224816321";

      ByteArrayOutputStream outContent = new ByteArrayOutputStream();

      PrintStream oldStream = System.out;

    	    System.setOut(new PrintStream(outContent));

    	    instance.run();

    	    assertEquals(expOut, outContent.toString());

    	    System.setOut(oldStream);



      instance.run();

    	}



    	@Test

    	public void prog3() throws Exception {

      //scan, parse, and type check the program

      String progname = "prog3";

      String input = progname + " {integer i \n i <- 5; \n if(true){i <- 10;} \n integer b \n b <- i;}";

      Scanner scanner = new Scanner(input);

      scanner.scan();

      Parser parser = new Parser(scanner);

      ASTNode program = parser.parse();

      TypeCheckVisitor v = new TypeCheckVisitor();

      program.visit(v, null);

      show(program);



      //generate code

      CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);

      byte[] bytecode = (byte[]) program.visit(cv, null);



      //output the generated bytecode

      CodeGenUtils.dumpBytecode(bytecode);



      //write byte code to file

      String name = ((Program) program).getName();

      String classFileName = "bin/" + name + ".class";

      OutputStream output = new FileOutputStream(classFileName);

      output.write(bytecode);

      output.close();

      System.out.println("wrote classfile to " + classFileName);



      // directly execute bytecode

      String[] args = new String[0]; //create command line argument array to initialize params, none in this case

      Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);



      String expOut = "51010";

      ByteArrayOutputStream outContent = new ByteArrayOutputStream();

      PrintStream oldStream = System.out;

    	    System.setOut(new PrintStream(outContent));

    	    instance.run();

    	    assertEquals(expOut, outContent.toString());

    	    System.setOut(oldStream);



      instance.run();

    	}
    	@Test
    	public void sleepStatement0() throws Exception {
    		String name = "sleepStatement0";
    		String input = name + " integer i1, integer i2 ";
    		input += "{\n sleep(i1*i2);}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[]{"50", "5",
    				"C:\\Users\\Surya\\Pictures\\pokemon.jpg",
    				"C:\\Users\\Surya\\Pictures\\pokemon.jpg"}; //create String[] array to initialize params
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	/* simple test to load an image from a file and save it to a different file */
    	@Test
    	public void assng6Test0() throws Exception {
    		String name = "assng6Test0";
    		String input = name + " file f1, file f2 {\n image i f1->i; i->f2;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params
//images/imgin-1.jpg
 //images/imgout-8.jpg    		
    		args[0] = new String("C:\\Users\\Surya\\Pictures\\pokemon.jpg");
    		args[1] = new String("C:\\Users\\Surya\\Pictures\\GokuRose.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		//instance.run();
    	}

    	/* load an image file, scale it and save it back to another file */
    	@Test
    	public void assng6Test1() throws Exception {
    		String name = "assng6Test1";
    		String input = name + " file f1, file f2 {\n image i f1->i->scale(2)->f2;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("C:\\Users\\Surya\\Pictures\\pokemon.jpg");
    		args[1] = new String("C:\\Users\\Surya\\GokuRose.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	/* simple test to find the height of an image */
    	@Test
    	public void assng6Test2() throws Exception {
    		String name = "assng6Test2";
    		String input = name + " file f1 {\n image i integer h f1->i->height->h;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("C:\\Users\\Surya\\Pictures\\GokuRose.jpg");

    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		//instance.run();
    	}

    	/* simple test to find the width of an image */
    	@Test
    	public void assng6Test3() throws Exception {
    		String name = "assng6Test3";
    		String input = name + " file f1 {\n image i integer h f1->i->width->h;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("C:\\Users\\Surya\\Pictures\\GokuRose.jpg");

    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		//instance.run();
    	}

    	/* simple test to load an image file, blur it and save it back to another file */
    	@Test
    	public void assng6Test4() throws Exception {
    		String name = "assng6Test4";
    		String input = name + " file f1, file f2 {\n image i f1->i->blur;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("C:\\Users\\Surya\\Pictures\\GokuRose.jpg");
    		args[1] = new String("C:\\Users\\Surya\\Pictures\\GokuRose.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		//instance.run();
    	}

    	/* simple test to load an image file, gray it and save it back to another file */
    	@Test
    	public void assng6Test5() throws Exception {
    		String name = "assng6Test5";
    		String input = name + " file f1, file f2 {\n image i f1->i->gray->f2;}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("C:\\Users\\Surya\\Pictures\\GokuRose.jpg");
    		args[1] = new String("C:\\Users\\Surya\\GokuRose.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		//instance.run();
    	}

    	/* simple test to load an image file, convolve it and save it back to another file */
    	@Test
    	public void assng6Test6() throws Exception {
    		String name = "assng6Test6";
    		String input = name + " file f1, file f2 {\n image i "
    				+ "f1->i->"
    				+ "convolve"
    				+ "->f2"
    				+ ";}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("C:\\Users\\Surya\\Pictures\\GokuRose.jpg");
    		args[1] = new String("C:\\Users\\Surya\\GokuRose.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		//instance.run();
    	}

    	/* simple test to load an image from an url, scale it double, gray it and save it to a file */
    	@Test
    	public void assng6Test7() throws Exception {
    		String name = "assng6Test7";
    		String input = name + " url u, file f1 {\n "
    				+ "image i u->i->scale(2)->gray->f1;"
    				+ "}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("http://www.avajava.com/images/avajavalogo.jpg");
    		args[1] = new String("C:\\Users\\Surya\\Pictures\\GokuRose.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		//instance.run();
    	}

    	/* simple test to load an image from a file, set it in a frame and show */
    	@Test
    	public void assng6Test8() throws Exception {
    		String name = "assng6Test8";
    		String input = name + " file in {\n image i frame fm in->i->fm->show; sleep(3000);}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("C:\\Users\\Surya\\Pictures\\GokuRose.jpg");

    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		//instance.run();
    	}

    	/* simple test to load an image from a file, set it in a frame, move it and show */
    	@Test
    	public void assng6Test9() throws Exception {
    		String name = "assng6Test9";
    		String input = name + " file in {\n image i frame fm "
    				+ "in->i->fm->move(1,2)"
    				+ "->show"
    				+ "; sleep(3000);}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[1]; //create String[] array to initialize params

    		args[0] = new String("C:\\Users\\Surya\\Pictures\\GokuRose.jpg");

    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		instance.run();
    	}

    	/* simple test to load an image from a file, set it in a frame, move it and show.
    	 * get the x and y loc of the frame, scale the image by double and move it by adding
    	 * 500 to its original xloc and yloc and show */
    	@Test
    	public void assng6Test10() throws Exception {
    		String name = "assng6Test10";
    		String input = name + " file in, file in1 {\n integer j integer j1 frame f image i image i1 frame fm integer x integer y";
    		input += " in->i;}";
    		//input += " in->i->fm->move(1,2)->show; sleep(1000);\n fm->xloc->x; fm->yloc->y;";
    		//input += " i->scale(2)->fm->move(x+500, y+500)->show; sleep(4000);}";
    		Scanner scanner = new Scanner(input);
    		scanner.scan();
    		Parser parser = new Parser(scanner);
    		ASTNode program = parser.parse();
    		TypeCheckVisitor v = new TypeCheckVisitor();
    		program.visit(v, null);
    		show("\n\n" + program);

    		//generate code
    		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
    		byte[] bytecode = (byte[]) program.visit(cv, null);

    		//output the generated bytecode
    		CodeGenUtils.dumpBytecode(bytecode);

    		//write byte code to file
    		String classFileName = "bin/" + ((Program) program).getName() + ".class";
    		OutputStream output = new FileOutputStream(classFileName);
    		output.write(bytecode);
    		output.close();
    		show("wrote classfile to " + classFileName);

    		// directly execute bytecode
    		String[] args = new String[2]; //create String[] array to initialize params

    		args[0] = new String("C:\\Users\\Surya\\Pictures\\pokemon.jpg");
    		args[1] = new String("C:\\Users\\Surya\\Pictures\\GokuRose.jpg");
    		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
    		//instance.run();
    	}
}



