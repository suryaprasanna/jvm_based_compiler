
package cop5556sp17;

import java.io.FileOutputStream;
import java.io.OutputStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;

public class CodeGenVisitorTest {

	static final boolean doPrint = true;
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	boolean devel = false;
	boolean grade = true;

	@Before
	public void initLog(){
		if (devel || grade) PLPRuntimeLog.initLog();
	}
	
	@After
	public void printLog(){
		System.out.println(PLPRuntimeLog.getString());
	}

	@Rule
	public ExpectedException thrown = ExpectedException.none();

	//@Test
	public void emptyProg() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + "  {}";		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	//@Test
	public void testparam() throws Exception {
		String progname = "paramtest";
		String input = progname + " integer i, boolean b, integer j {}";	
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[3]; //create command line argument array to initialize params, none in this case
		args[0] = "5";
		args[1] = "true";
		args[2] = "34";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	//@Test
	public void testdecs() throws Exception {
		String progname = "paramtest";
		String input = progname + " integer i, boolean b {integer i1 boolean b1 i1 <- i; b1 <- b; }";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[2]; //create command line argument array to initialize params, none in this case
		args[0] = "5";
		args[1] = "true";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	//@Test
	public void testExpression() throws Exception {
		String progname = "paramtest";
		String input = progname 
				+ " integer i, boolean b {integer i1 boolean b1 i1 <- i*2;"
				+ "i1 <- (i+2)*4/(10*i);"
				+ "i1 <- i/(i-4);"
				+ "i1 <- i-2;"
				+ "i1 <- i/2;"
				+ "i1 <- i%2;"
				+ "b1 <- (b != true);"
				
				+ "b1 <- (b >= b);"
				+ "b1 <- (b == (b!=true));"
				+ "b1 <- (b != b);"
				
				+ "b1 <- (b >= (b < true));"
				+ "b1 <- (b <= true);"
				+ " b1 <- (b > true); }";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[2]; //create command line argument array to initialize params, none in this case
		args[0] = "5";
		args[1] = "true";
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	//@Test
	public void testIfStatement() throws Exception {
		String progname = "paramtest";
		String input = progname 
				+ " integer i, boolean b "
				+ "{integer i1 boolean b1 i1 <- i*2; b1 <- (b != true);"
				+ "if (i1 == 10) {i1 <- i1/0;}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[2]; //create command line argument array to initialize params, none in this case
		args[0] = "5";
		args[1] = "true";
		thrown.expect(ArithmeticException.class);
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	//@Test
	public void testWhileStatement() throws Exception {
		String progname = "paramtest";
		String input = progname 
				+ " integer i, boolean b "
				+ "{integer i1 boolean b1 i1 <- i*2; b1 <- (b != true);"
				+ "if (i1 == 10) {i1 <- (i1/1);"
				+ "while(i1 > 0) {i1 <- (i1-2);}"
				+ "if (i1 == 0) {i1 <- (i1/0);}"
				+ "}"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[2]; //create command line argument array to initialize params, none in this case
		args[0] = "5";
		args[1] = "true";
		thrown.expect(ArithmeticException.class);
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
//	@Test
	public void testFile() throws Exception {
		String progname = "filetest";
		String input = progname 
				+ " integer i, file f, file wr"
				+ "{image im "
				+ "i <- 2; "
				+ "f -> im -> wr;"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		CodeGenUtils.dumpBytecode(bytecode);
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"5", "C:\\Users\\Surya\\Pictures\\pokemon.jpg", "C:\\Users\\Surya\\Pictures\\pokemon1.jpg"};
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	@Test
	public void failedCases() throws Exception {
		String input = "subImage url u "
				+ "{image i image j image k frame f \n"
				+ "u -> i; \n"
				+ "u -> j; \n "
				+ "k <- i-j; "
				+ "i -> f -> show; sleep 1000;\n"
				+ "}";
		
		input = "readFromURLandWriteToFile2 "
				+ "url u, \nfile out \n{"
				+ "image i frame f \n"
				+ "u -> gray  -> i;\n "
				+ "i -> f -> show;\n "
				+ "i -> out;\n"
				+ "}";
		input = "readFromURLandWriteToFile3 url u, \nfile out \n{\nu -> gray  -> out;\n}";
//		input = "sleepImg url u {image i frame f \n"
//				+ "u -> i -> convolve -> f -> show;"
//				+ "sleep 5;"
//				+ "integer j j <- 42;\n}";
		input = "addImage url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show;  sleep 5; k <- k + i; k -> f -> show; \n}";
		input = "booleanComp1 { boolean x  "
				+ "x<- true == false;boolean y  y<- true != false;"
				+ "boolean z  "
				+ "z<- true | false;"
				+ "z<- x|y;"
				+ "z<- x&y;"
				+ "} ";
		input = "booleanComp2 { boolean x  x<- true;boolean y  y<- false;boolean z  z<- true < false;integer a  a<- 4;integer b  b<- 6;z<- ((a<b) | x) & y;z<- (a<b) | (x & y);} ";
		input = "convolveImg url u {image i frame f \nu -> i -> convolve -> f -> show;\n}";
		input = "readFromURLandDisplay url u {image i frame f \nu -> i;i -> f -> show;\n}";
//		input = "imgMove2 url u {image i frame f \n"
//				+ "u -> i;i -> f -> show; \nsleep 5; \n"
//				+ "integer x \ninteger y \nx <- screenwidth;\ny <-  screenheight; \n"
//				+ "f "
//				+ "-> move (x*3/4,y/4) "
//				+ "-> show"
//				+ ";\n"
//				+ "}";
		input = "subImage2 url u {image i image j  frame f \nu -> i; \nu -> j; \n i <- i-j; i -> f -> show;\n}";
		input = "booleanBinaryExpression2 \nboolean  b0, boolean b1{  \n boolean b3 boolean b4 b3 <- b0 & b1; b4 <- b0 | b1;}";
		input = "booleanBinaryExpression3 \nboolean  b0, boolean b1{  \n boolean b3 boolean b4 b3 <- b0 & b1; b4 <- b0 | b1;}";
		input = "modImage url u {image i image j  frame f \nu -> j; \n i <- j%128; i -> f -> show;\n}";

		input = "readFromURLandDisplayDisplay2 url u {image i frame f \nu -> i -> f -> show;\n}";
		input = "readFromURLandWriteToFile url u, \nfile out \n{image i frame f \nu -> i;i -> f -> show; \n i -> out;\n}";
//		input = "blurImg url u {image i frame f \nu -> i -> "
//				+ "blur -> "
//				+ "f -> show;\n}";
		input = "grayImg url u {image i frame f \nu -> i -> gray -> f -> show;\n}";
		input = "divImage url u {image i image j  frame f \nu -> j; \n i <- j/2; i -> f -> show;\n}";
		input = "readFromURLandWriteScaledImageToFile url u, \nfile out \n{image i frame f \nu -> scale (3) -> i;i -> f -> show; \n i -> out;\n}";
		input = "readFromFile file u {image i frame f \nu -> i;i -> f -> show; \n}";
		input = "barArrowGray url u {image i frame f \nu -> i |-> gray -> f -> show;\n}";
		input = "assignImage url u {image i image j frame f \nu -> i; j <- i;j -> f -> show;\n}";
		input = "scaleImage url u {image i frame f \nu -> i -> f -> show; frame f2  \ni -> scale (3) -> f2 -> show;\n}";
//		input = "imgMove url u {"
//				+ "image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \n"
//				+ "f -> xloc -> x; \n"
//				+ "f -> yloc -> y; \n"
//				+ "f -> move (x+100,y-100) -> show;\n"
//				+ "}";
		input = "assignImageAndFrame url u {image i image i1 frame f frame f1\nu -> i -> f -> show; frame f2  \ni -> scale (3) -> f2 -> show; \n i1 <- i; \n f2 <- f;\n}";
		input = "booleanBinaryExpression \nboolean  b0, boolean b1{  \n boolean b3 boolean b4 b3 <- b0 & b1; b4 <- b0 | b1;}";
		input = "allTheOps url u {"
		+ "image i frame f \nu -> i -> gray -> convolve -> blur -> i -> f -> show;\n}";
		input = "imgMove url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5000; \ninteger x \ninteger y \nf -> xloc -> x; \nf -> yloc -> y; \nf -> move (x+100,y-100) -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		CodeGenUtils.dumpBytecode(bytecode);
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{
//				"true", "true"
				"http://t01.deviantart.net/XCmnO9sXeQoSygkej0U9UQxZcTY=/fit-in/700x350/filters:fixed_height(100,100):origin()/pre03/52c6/th/pre/i/2017/025/5/4/goku_ssj_blue_by_al3x796-dawpni2.png"
				,"C:\\Users\\Surya\\Pictures\\test.jpg"
		};
//				,
//				"C:\\Users\\Surya\\Pictures\\test.jpg"};
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		
	}
	
//	@Test
	public void testFile1() throws Exception {
		String progname = "subImage";
		String input = progname 
				+ " url u "
				+ "{image i image j image k frame f "
				+ "\nu -> i "
				+ "\n-> scale(2)"
				+ "-> gray "
				+ "-> i"
				+ "; "
//				+ "\nu -> j; "
//				+ "\n k <- i+j; "
				+ "i -> f -> show; sleep 1000;"
				+ "\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		CodeGenUtils.dumpBytecode(bytecode);
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[]{"http://t01.deviantart.net/XCmnO9sXeQoSygkej0U9UQxZcTY=/fit-in/700x350/filters:fixed_height(100,100):origin()/pre03/52c6/th/pre/i/2017/025/5/4/goku_ssj_blue_by_al3x796-dawpni2.png"};
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
}
